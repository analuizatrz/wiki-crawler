[[Image:csv_delimited000.svg|thumb|right|200px|A stylistic depiction of a fragment from a [[Comma-separated values|CSV]]-formatted text file. The commas (shown in red) are used as field delimiters.]]

A '''delimiter''' is a sequence of one or more [[character (computing)|character]]s used to specify the boundary between separate, independent regions in [[plain text]] or other data stream.<ref>[http://www.its.bldrdoc.gov/fs-1037/dir-011/_1544.htm Federal Standard 1037C ''delimiter'']</ref> An example of a delimiter is the comma character in a sequence of [[comma-separated values]].

An alternative to the use of field delimiters is [[String_literal#Declarative_notation|declarative notation]], which uses a length field at the start of a region to specify the boundary. For word delimiters used in the written form of human languages, see [[interword separation]].

== Overview ==
Delimiters can be broken down into:

* Field and Record delimiters
* Bracket delimiters

==Field and record delimiters==
Field delimiters are used to separate data fields. Record delimiters separate groups of fields.<ref name="FldDelm">{{cite book | last = de Moor | first = Georges J. | title = Progress in Standardization in Health Care Informatics | publisher =IOS Press | year = 1993 | id =ISBN 9051991142}} p. 141</ref>

For example, the (CSV) file format uses a [[comma]] as the delimiter between [[field (computer science)|fields]], and a [[end-of-line]] indicator as the delimiter between [[Row (database)|records]].  For instance:

    fname,lname,age,salary
    nancy,davolio,33,$30000
    erin,borakova,28,$25250
    tony,raphael,35,$28700

specifies a simple [[flat file database]] [[table (information)|table]] using the (CSV) file format.

==Bracket delimiters==

Bracket delimiters (also block delimiters, region delimiters, balanced delimiters) are used to mark both the start and end of a region of text.<ref name="BalaDelm">{{cite book | last = Friedl | first = Jeffrey E. F. | title = Mastering Regular Expressions: Powerful Techniques for Perl and Other Tools | publisher = O'Reilly | year = 2002| id = ISBN 0596002890}} p. 319</ref> They are used in almost all  programming languages, including [[Wikicode]].

Some of the more common ''bracket'' delimiters include the following:<ref name="programmingperl">{{cite book | title=Programming Perl, Third Edition | author=[[Larry Wall|Wall, Larry]], [[Tom Christiansen]] and [[Jon Orwant]] | publisher=O'Reilly | month=July | year=2000 | ISBN=0-596-00027-8}}</ref>

* <nowiki>( and )</nowiki>
* <nowiki>{ and }</nowiki>
* <nowiki>[ and ]</nowiki>
* <nowiki>< and ></nowiki>
* <nowiki>" and "</nowiki> commonly used to denote [[string literal]]s.
* <nowiki>' and '</nowiki> commonly used to denote string literals.
* <nowiki><? and ?></nowiki> used to indicate [[XML]] processing instructions.
* <nowiki>/* and */</nowiki> used to denote [[comment (computer programming)|comment]]s in some programming languages.
* <nowiki>{| and |}</nowiki> used to indicate a table in [[Wikicode]].
* <nowiki><% and %></nowiki> used in some [[web template]]s to specify language boundaries.

==Conventions==

Computing platforms historically use certain delimiters by convention. 

'''Field and Record delimiters'''
{| class="wikitable" 
    !   !! End of Field !! End of Record !! End of File
    |-
    ! Unix (and Mac OS X)
    | [[Tab_key|Tab]] || [[Line_feed|LF]] || none
    |-
    ! Windows
    | [[Tab_key|Tab]] || [[CRLF]] || none
    |-
    ! Classic Mac OS
    | [[Tab_key|Tab]] || [[Carriage_return|CR]] || none
    |-
    ! Unicode
    | UNIT SEPARATOR<br>Position 31 (U+001F) || RECORD SEPARATOR<br>Position 30 (U+001E) || FILE SEPARATOR<br>Position 28 (U+001C)
|}

'''Programming languages'''
{| class="wikitable"  
    !   !! String Literal !! End of Statement
    |-
    ! Pascal
    | doublequote || semicolon
    |-
    ! C
    | doublequote, singlequote || semicolon
    |-
|}
<!-- TODO ;; finish this table
'''Markup languages'''
{{fact}}
-->

==Delimiter collision==
'''Delimiter collision''' is a problem that occurs when an author or programmer introduces delimiters into text without actually intending them to be interpreted as boundaries between separate regions.<ref name="FldDelm"/> In the case of [[Comma-separated values]] files, for example, this can occur whenever an author attempts to include a comma as part of a field value (e.g., salary = "$30,000").

Because this is a very common problem, a number of methods for avoiding delimiter collision have been invented.

===Solutions===

====Escape character====
One method for avoiding delimiter collision is to use [[escape character]]s. From a language design standpoint, these are adequate, but they have some drawbacks:

* text can be rendered unreadable when littered with numerous escape characters
* they require a mechanism to 'escape the escapes' when not intended as escape characters
* although easy to type, they can be cryptic to someone unfamiliar with the language

====Escape sequence====
Escape sequences are similar to escape characters, except they usually consist of some kind of mnemonic instead of just a single character.  One use is in [[string literal]]s that include a doublequote (") character. For example in [[Perl]], the code:
    print "Nancy said \x34Hello World!\x34 to the crowd.";  ### use \x34

produces the same output as:     
    print "Nancy said \"Hello World!\" to the crowd.";      ### use escape char

One drawback of escape sequences, when used by people, is the need to memorize the various codes that represent individual characters (see also: [[character entity reference]], [[numeric character reference]]).    

====Dual quoting delimiters====
In contrast to escape sequences and escape characters, dual delimiters
provide yet another way to avoid delimiter collision. Some languages, for example, allow the use of either a singlequote (') or a doublequote (") to specify a string literal. For example in [[Perl]]:

    print 'Nancy said "Hello World!" to the crowd.';
    
produces the desired output without requiring escapes. This approach, however, only works when the string does not contain ''both'' types of quotation marks.

====Multiple quoting delimiters====
In contrast to dual delimiters, multiple delimiters are even more flexible for avoiding delimiter collision.<ref name="ProgPerl001">Wall, ''infra'' p. 63</ref> 

For example in [[Perl]]:

    print qq^Nancy doesn't want to say "Hello World!" anymore.^;

    print qq@Nancy doesn't want to say "Hello World!" anymore.@;

    print qq§Nancy doesn't want to say "Hello World!" anymore.§;

all produce the desired output through use of the '''quotelike operator''', which allows numerous different characters to act as delimiters. Although this method is more flexible, few languages support it. [[Perl]] and [[Ruby (programming language)|Ruby]] are two that do.<ref name="Ruby000">{{cite book 
| last      = Yukihiro
| first     = Matsumoto
| title     = Ruby in a Nutshell 
| publisher = O'Reilly
| year      = 2001
| id        = 0596002149
}} In Ruby, these are indicated as ''general delimited strings'' p. 11. </ref><ref name="ProgPerl002">Wall, ''infra'' p. 63</ref>

====Content boundary ====
A '''content boundary''' is a special type of delimiter that is specifically designed to resist delimiter collision. It works by allowing the author to specify a long sequence of characters that is guaranteed to always indicate a boundary between parts in a multi-part message, with no other possible interpretation.<ref name="Mime000">{{cite book 
| last      = Javvin Technologies
| first     = Incorporated
| title     = Network Protocols Handbook
| publisher = Javvin Technologies Inc.
| year      = 2005
| id        = 0974094528
}} p. 26 </ref>

This is usually done by specifying a random sequence of characters followed by an identifying mark such as a [[UUID]], a [[timestamp]], or some other distinguishing mark. (see e.g., [[MIME#Multipart Messages|MIME]], [[Here_document|Here documents]]).

==== Regular expression syntax ====
:{{seealso|Regular expression examples}}

In specifying a [[regular expression]], alternate delimiters may also be used to simplify the syntax for '''match''' and '''substitution''' operations in [[Perl]].<ref name="Friedl000">Friedl ''infra''.</ref>

For example, a simple match operation may be specified in perl with the following syntax: 

    $string1 = 'Nancy said "Hello World!" to the crowd.';    # specify a target string
    print $string1 =~ m/[aeiou]+/;                           # match one or more vowels

The syntax is flexible enough to specify match operations with alternate delimiters, making it easy to avoid delimiter collision:

    $string1 = 'Nancy said "httq://Hello/World.htm" is not a valid address.'; # target string
    
    print $string1 =~ m@httq://@;       # match using alternate regular expression delimiter
    print $string1 =~ m{httq://};       # same as previous, but different delimiter
    print $string1 =~ m!httq://!;       # same as previous, but different delimiter

==ASCII armor==
Although principally used as a mechanism for text encoding of binary data,
[[ASCII armor]]ing is also a way to avoid delimiter collision in some 
circumstances. It is contrasted from all other methods because it is
more complicated. It employs a special encoding scheme, such as [[base64]].

==References==
<references />

==See also==
* [[Delimiter-separated values]]
* [[String literal]]
* [[CamelCase]] (used in [[WikiWikiWeb]] as an alternate method of link creation that does not require delimiters to indicate links)
* [[Federal Standard 1037C]] (contains a simple definition for "delimiter")
* [[Naming collision]]

[[Category:Programming language topics]]
[[Category:Markup languages]]

[[de:Delimiter]]
[[pl:Delimiter]]
[[uk:Розділяючий символ]]