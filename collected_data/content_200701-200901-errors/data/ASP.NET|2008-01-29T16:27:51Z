{{citations missing|date=January 2008}}

[[Image:ASPNETlogo.gif|250px|right|thumb|ASP.NET logo]]
'''ASP.NET''' is a [[web application framework]] marketed by [[Microsoft]] that [[programmer]]s can use to build dynamic [[web site]]s, [[web application]]s and [[XML]] [[web service]]s. It is part of Microsoft's [[Microsoft .NET|.NET platform]] and is the successor to Microsoft's [[Active Server Pages]] (ASP) technology. ASP.NET is built on the [[Common Language Runtime]], allowing programmers to write ASP.NET code using any [[.NET Languages|Microsoft .NET language]].

==Characteristics==
===ASPX FILE format=== 
'''ASPX''' is a html file format used to create [[Form (web)|Webform]] pages;  in programming jargon, the ASPX file typically contains static [[HTML]] or [[XHTML]] markup, as well as markup defining [[ASP.NET Web Controls|Web Controls]] and [[ASP.NET Web User Controls|Web User Controls]] where the developers place all the required static and dynamic content for the web page.  Additionally, dynamic code which runs on the server can be placed in a page within a block '''<code><nowiki><% -- dynamic code -- %></nowiki></code>''' which is similar to other web development technologies such as [[PHP]], [[JavaServer Pages|JSP]], and [[Active Server Pages|ASP]], but this practice is generally frowned upon by Microsoft except for the purposes of [[Binding (computer science)|data binding]] since it requires more calls when rendering the page.

It is recommended by Microsoft for dealing with dynamic program code to use the [[code-behind]] model, which places this code in a separate file or in a specially designated script tag.  Code-behind files are typically named something to the effect of ''MyPage.aspx.cs'' or ''MyPage.aspx.vb'' based on the ASPX file name (this practice is automatic in [[Microsoft Visual Studio]] and other [[Integrated development environment|IDEs]]).  When using this style of programming, the developer writes code to respond to different events, like the page being loaded, or a control being clicked, rather than a procedural walk through the document.

===Rendering technique===
''''''ASP.NET'''''' uses a ''visited composites'' rendering technique. During compilation the template (.aspx) file is compiled into initialization code which will build a control tree (the composite) representing the original (static) template. Literal text goes into instances of the Literal control class, server controls are represented by instances of a specific control class. The initialization code is combined with user-written code (usually by the assembly of multiple partial classes) and results in a class specific for the page. The page doubles as the root of the '''control tree.'''

Actual requests for the page are processed through a number of steps. First, during the initialization steps, an instance of the page class is created and the initialization code is executed. This produces the initial control tree which is now typically manipulated by the methods of the page in the following steps. As each node in the tree is a control represented as an instance of a class, the code may change the tree structure as well as manipulate the properties/methods of the individual nodes. Finally, during the rendering step a visitor is used to visit every node in the tree, asking each node to render itself using the methods of the visitor. The resulting HTML code is sent to the client.

After the request has been processed, the instance of the page class is discarded and with it the entire control tree.

===Other files===
{{Mergefrom|ASP.NET Web User Controls|date=January 2008}}
Other file extensions associated with different versions of ASP.NET include:

; asax : [[Global.asax]], used for application-level logic <ref>http://msdn2.microsoft.com/en-us/library/2027ewzw.aspx</ref>
; ascx : Web UserControls:  custom [[Widget (computing)|controls]] to be placed onto web pages.
; ashx : custom [[HTTP]] handlers.
; asmx : [[web service]] pages.
; axd : when enabled in [[web.config]] requesting trace.axd outputs application-level tracing. Also used for the special webresource axd handler which allows control/component developers to package a component/control complete with images, script, css etc. for deployment in a single file (an 'assembly')
; browser : browser capabilities files stored in [[XML]] format; introduced in version 3.0. ASP.NET 2 includes many of these by default, to support common web browsers. These specify which browsers have which capabilities, so that ASP.NET 2 can automatically customize and optimize its output accordingly. Special .browser files are available for free download to handle, for instance, the W3C Validator, so that it properly shows standards-compliant pages as being standards-compliant. Replaces the harder-to-use BrowserCaps section that was in [[machine.config]] and could be overridden in [[web.config]] in ASP.NET 1.x.
; config : [[web.config]] is the only file in a specific Web application to use this extension by default ([[machine.config]] similarly affects the entire Web server and all applications on it), however ASP.NET provides facilities to create and consume other config files.  These are stored in [[XML]] format, so as to allow configuration changes to be made with simplicity.
; cs/vb : In ASP.NET 2 any cs/vb files placed inside the App_Code folder are dynamically compiled and available to the whole application.
; master : [[ASP master pages|Master Pages]];  introduced in version 2.0
; sitemap : sitemap configuration files
; skin : theme skin files.
; resx : resource files for [[internationalization]] and [[localization]]. Resource files can be global (e.g. messages) or "local" which means specific for a single '''aspx''' or '''ascx''' or file.
; dbml : (version 3.5) [[LINQ]] to [[SQL]] data classes file

===Directory structure===
In general, the ASP.NET directory structure can be determined by the developer's preferences. Apart from a few reserved directory names, the site can span any number of directories. The structure is typically reflected directly in the urls. Although ASP.NET provides means for intercepting the request at any point during processing, the developer is not forced to funnel requests through a central application or front controller.

The special directory names are:
; App_Browsers : holds site-specific browser definition files.
; App_Code : This is the "raw code" directory. The ASP.NET server will automatically compile files (and subdirectories) in this folder into an assembly which is accessible in the code of every page of the site. App_Code will typically be used for data access abstraction code, model code and business code. Also any site-specific http handlers and modules and web service implementation go in this directory. As an alternative to using App_Code the developer may opt to provide a separate assembly with precompiled code.
; App_Data : default directory for [[database]]s, such as Access mdb files and SQL Server mdf files. This directory is usually the only one with write access for the application.
; App_LocalResources : Contains localized resource files for individual pages of the site. E.g. a file called CheckOut.aspx.fr-FR.resx holds localized resources for the french version of the CheckOut.aspx page. When the UI culture is set to french, ASP.NET will automatically find and use this file for localization.
; App_GlobalResources : Holds '''resx''' files with localized resources available to every page of the site. This is where the ASP.NET developer will typically store localized messages etc. which are used on more than one page.
; App_Themes : holds alternative themes of the site.
; App_WebReferences : holds discovery files and [[WSDL]] files for references to [[web service]]s to be consumed in the site.

==Performance==
ASP.NET aims for performance benefits over other script-based technologies (including ASP Classic) by compiling the server-side code to one or more [[dynamic link library|DLL]] [[computer file|file]]s on the [[web server]]. This compilation happens automatically the first time a page is requested (which means the developer need not perform a separate compilation step for pages). This feature provides the ease of development offered by scripting languages with the performance benefits of a compiled binary.  However, the compilation might cause a noticeable delay to the web user when the newly-edited page is first requested from the web server. 

The ASPX and other resource files are placed in a virtual host on an [[Internet Information Services]] (or other compatible ASP.NET servers;  see Other Implementations, below).  The first time a client requests a page, the .NET framework parses and compiles the file(s) into a .NET assembly and sends the response;  subsequent requests are served from the DLL files. By default ASP.NET will compile the entire site in batches of 1000 files upon first request. If the compilation delay is causing problems, the batch size or the compilation strategy may be tweaked.

Developers can also choose to pre-compile their code before deployment, eliminating the need for just-in-time compilation in a production environment.

==Extension==
Microsoft has released some extension frameworks that plug into [[ASP.NET]] and extend its functionality. Some of them are:
;[[ASP.NET AJAX]]: An extension with both client-side as well as server-side components for writing ASP.NET pages that incorporate [[AJAX (programming)|AJAX]] functionality.
;[[ASP.NET MVC Framework]]: An extension to author ASP.NET pages using the [[Model View Controller|MVC]] architecture.

==ASP.NET compared to ASP classic==
ASP.NET attempts to simplify developers' transition from [[Microsoft Windows|Windows]] application development to web development by offering the ability to build pages composed of ''[[Widget (computing)|controls]]'' similar to a Windows [[user interface]]. A web control, such as a ''button'' or ''label'', functions in very much the same way as its Windows counterpart: code can assign its properties and respond to its events. Controls know how to render themselves: whereas Windows controls draw themselves to the screen, web controls produce segments of [[HTML]] and [[JavaScript]] which form part of the resulting page sent to the end-user's browser.

ASP.NET encourages the programmer to develop applications using an [[Event-driven programming|event-driven]] [[Graphical user interface|GUI]] paradigm ([[Event-driven programming|event-driven]] [[Graphical user interface|GUI]] model), rather than in conventional web-[[Scripting programming language|scripting]] environments like ASP and [[PHP]]. The framework attempts to combine existing technologies such as JavaScript with internal components like "[[ViewState]]" to bring persistent (inter-request) state to the inherently [[Stateless server|stateless]] web environment.

Other differences compared to ASP classic are:
* Compiled code means applications run faster with more design-time errors trapped at the development stage.
* Significantly improved run-time error handling, making use of [[exception handling]] using try-catch blocks.
* Similar metaphors to [[Microsoft Windows|Windows]] applications such as controls and events, which make development of rich user interfaces, previously only found on the desktop, possible.
* An extensive set of controls and class libraries allows the rapid building of applications, plus user-defined controls allow commonly used [[Web template|templates]], such as menus. Layout of these controls on a page is easier because most of it can be done visually in most editors.
* ASP.NET leverages the multi-language capabilities of the .NET [[Common Language Runtime|CLR]], allowing web pages to be coded in VB.NET, C#, J#, etc.
* Ability to cache the whole page or just parts of it to improve performance.
* Ability to use the [[code-behind]] development model to separate business logic from presentation.
* If an ASP.NET application [[Memory leak|leaks memory]], the ASP.NET runtime unloads the AppDomain hosting the erring application and reloads the application in a new AppDomain. 
* [[Session state]] in ASP.NET can be saved in a [[Microsoft SQL Server|SQL Server]] database or in a separate process running on the same machine as the web server or on a different machine. That way session values are not lost when the web server is reset or the ASP.NET worker process is recycled.
* Previous versions of ASP.NET (1.0 and 1.1) were criticized for their lack of standards compliance. The generated [[HTML]] and [[JavaScript]] sent to the client browser would not always validate against [[W3C]]/ECMA standards. In addition, the framework's browser detection feature sometimes incorrectly identified web browsers other than Microsoft's own [[Internet Explorer]] as "downlevel" and returned HTML/JavaScript to these clients with some of the features removed, or sometimes crippled or broken. However, in version 2.0, all controls generate valid [[HTML]] 4.0, [[XHTML]] 1.0 (the default) or [[XHTML]] 1.1 output, depending on the site configuration. Detection of standards-compliant web browsers is more robust and support for [[Cascading Style Sheets]] is more extensive.
* Web Server Controls: these are controls introduced by ASP.net for providing the UI for the web form. These controls are state managed controls and are WYSIWYG (What You See Is What You Get) controls.

==Criticisms of ASP.NET==
On [[Internet Information Services|IIS]] 6.0 and lower, pages written using different versions of the ASP framework can't share [[Session State]] without the use of third-party libraries. This criticism does not apply to ASP.NET and ASP applications running side by side on [[Internet Information Services|IIS]] 7. With [[Internet Information Services|IIS]] 7, modules may be run in an integrated pipeline that allows modules written in any language to be executed for any request.<ref>[http://www.iis.net/default.aspx?tabid=2&subtabid=23&i=1223|Differences between IIS 7.0 Integrated Mode and Classic mode]</ref>    
    
In some cases ASP.NET runtime will recycle the worker process (e.g. if it becomes unresponsive or if an application runs amok and causes the worker process to use more than 60% of available RAM). It can also be configured to recycle the process proactively after a certain number of requests, time period etc. In these cases users may lose session state if the application is configured to use in-process sessions. If the application relies on session state to store authentication information (bad practice since cookie based authentication and membership is built into the framework) and the application is configured to use in-process sessions, the user may be logged out if the process is recycled.
    
ASP.NET 2.0 produces markup that passes W3C validation, but it is debatable as to whether this increases [[Web accessibility|accessibility]], one of the benefits of a semantic [[XHTML]] page + [[CSS]] representation. Several controls, such as the ''[[Login]]'' controls and the ''Wizard'' control, use [[HTML]] [[Table (HTML)|tables]] for layout by default. [[Microsoft]] has now gone some way to solve this problem by releasing the [http://www.asp.net/cssadapters/ ASP.NET 2.0 CSS Control Adapters], a free add-on that produces compliant accessible [[XHTML]]+[[CSS]] markup. However, some controls still rely on [[JavaScript]].'''

==Development tools==
Several available software packages exist for developing ASP.NET applications:

*[[Microsoft Expression Web]], part of the [[Microsoft Expression Studio]] application suite.
*[[Visual Studio .NET]] (for ASP.NET 1.x)
*[[ASP.NET Web Matrix]] (for ASP.NET 1.x; now no longer supported: replaced by the free [[Visual Web Developer 2005 Express Edition]])
*[[Visual Web Developer 2005 Express Edition]] or [[Visual Studio 2005]] (for ASP.NET 2.0)
*[[Visual Studio 2008]] or [[Visual Web Developer 2008 Express Edition]] (for ASP.NET 3.5)
*[[Macromedia Dreamweaver MX]], [[Macromedia Dreamweaver MX 2004]], or [[Macromedia Dreamweaver 8]] (doesn't support ASP.NET 2.0 features, and produces very inefficient code for ASP.NET 1.x: also, code generation and ASP.NET features support through version 8.0.1 was little if any changed from version MX: version 8.0.2 does add changes to improve security against SQL injection attacks)
*[[Macromedia HomeSite]] 5.5 (For ASP Tags)
*[[Microsoft FrontPage|Microsoft SharePoint Designer 12]]
*[[Delphi programming language|Delphi 2006]]
*[[MonoDevelop]] (Free/[[Open Source]])
*[[SharpDevelop]] (Free/[[Open Source]])

==Frameworks==
It is not essential to use the standard webforms development model when developing with ASP.NET.  Noteworthy frameworks designed for the platform include:
*[[Monorail (.Net)|Castle Monorail]], an open-source MVC framework with an execution model similar to [[Ruby on Rails]]. The framework is commonly used with [[Castle ActiveRecord]], an ORM layer built on [[NHibernate]].
*[[Spring.NET]], a port of the Spring framework for Java.

==History==
{| class="wikitable"
|-
!Date!!Version!!Remarks!!New features
|-
| [[January 16]], [[2002]] || 1.0 || First version<br>
released together with [[Visual Studio .NET]]
|
* [[Object oriented]] web application development supporting [[Inheritance (computer science)|Inheritance]], [[Polymorphism in object-oriented programming|Polymorphism]] and other standard OOP features
** Developers are no longer forced to use Server.CreateObject(...), so early-binding and type safety are possible.
* Based on [[Windows]] programming;  the developer can make use of DLL class libraries and other features of the web server to build more robust applications that do more than simply rendering HTML ( i.e. [[exception handling]] )
|-
| [[April 24]], [[2003]] 
| 1.1 
| released together with [[Windows Server 2003]]<br>
released together with [[Visual Studio .NET 2003]]
|
* Mobile controls
* Automatic input validation
|-
| [[November 7]], [[2005]] 
| 2.0 
| 
codename [[Whidbey]]<br>
released together with [[Visual Studio 2005]] and [[Microsoft Visual Studio Express|Visual Web Developer Express]]<br>
and [[Microsoft SQL Server|SQL Server 2005]]
| 
* New data controls (GridView, FormView, DetailsView)
* New technique for declarative data access (SqlDataSource, ObjectDataSource, XmlDataSource controls)
* Navigation controls
* [[ASP master pages|Master pages]]
* Login controls
* Themes
* Skins
* Web parts
* Personalization services
* Full pre-compilation
* New localization technique
* Support for 64-bit processors
* Provider class model
|-
| [[November 19]] [[2007]]
| 3.5 
| 

released together with [[Visual Studio Orcas|Visual Studio 2008]]
| 
* New data controls (ListView, DataPager)
* Integrated [[AJAX]] support
* Improved support for nested master pages
* Support for [[Language Integrated Query|LINQ]]
|}

==See also==
{{col-begin}}
{{col-2}}
* [[ASP.NET state management]]
* [[Active Server Pages]] (ASP) &ndash; ASP.NET's predecessor
* [[ASP.NET master pages]]
* [[Yellow Screen of Death]] &ndash; ASP.NET's Exception page
* [[Java Server Faces]] (JSF) &ndash;  web application technology with a similar component based approach for the [[Java (programming language)|Java]] platform
{{col-2}}
;ASP.NET Extensions
* [[ASP.NET AJAX]] - Extension for [[AJAX (programming)|AJAX]] enabled ASP.NET pages.
* [[ASP.NET MVC Framework]] - Extension for building web applications using [[Model View Controller|MVC]] architecture
{{col-end}}

;Alternatives to .NET and IIS
*[[Mono (software)|Mono]] - An open source, cross platform implementation of [[Common Language Runtime|CLR]], including an alternative implementation of ASP.NET.
*[[UltiDev Cassini Web Server]]  - A free web server that can be redistributed with ASP.NET 1.1 and 2.0 applications.

==References==
{{reflist}}

==External links==
{{Wikibooks}}
;ASP.NET Resources
*[http://www.asp.net/ Microsoft's Official ASP.NET 3.5 website] 
*[http://msdn.microsoft.com/asp.net/ ASP.NET on MSDN]
*[http://www.dotnetspace.com/ ASP.NET Tutorials and Code examples]
*[http://www.dotnetcurry.com/ShowArticle.aspx?ID=96 What's New In ASP.NET 3.5]

;ASP.NET Team Member blogs
* [[Scott Guthrie]], General Manager - [http://weblogs.asp.net/scottgu ScottGu's blog]   
* [[Nikhil Kothari]], Architect - [http://www.nikhilk.net nikhilk.net]   
* Brian Goldfarb, Product Manager - [http://blogs.msdn.com/bgold Brian Goldfarb's Blog]   
* Shanku Niyogi, Product Unit Manager - [http://www.shankun.com shankun.com]   
* Bertrand Le Roy, Developer - [http://weblogs.asp.net/bleroy Tales from the Evil Empire]   
* Harish Ranganathan, Developer Evangelist - [http://geekswithblogs.net/ranganh Harish Ranganathan] 


{{DotNET}}
{{Microsoft APIs|close}}

[[Category:.NET framework]]
[[Category:.NET programming languages]]
[[Category:Template engines]]
[[Category:World Wide Web]]
[[Category:Web application frameworks]]
[[Category:Microsoft application programming interfaces]]
[[Category:Microsoft Visual Studio]]

[[ar:ايه اس بي دوت نت]]
[[zh-min-nan:ASP.NET]]
[[ca:ASP.NET]]
[[cs:ASP.NET]]
[[da:ASP.NET]]
[[de:ASP.NET]]
[[es:ASP.NET]]
[[fa:ASP.NET]]
[[fr:ASP.NET]]
[[gl:ASP.NET]]
[[id:ASP.NET]]
[[it:ASP.NET]]
[[he:ASP.NET]]
[[ms:ASP.NET]]
[[nl:ASP.NET]]
[[ja:ASP.NET]]
[[no:ASP.NET]]
[[pl:ASP.NET]]
[[pt:ASP.NET]]
[[ro:ASP.NET]]
[[ru:ASP.NET]]
[[se:ASP.NET]]
[[sq:ASP.NET]]
[[sv:ASP.NET]]
[[th:เอเอสพีดอตเน็ต]]
[[tr:ASP.NET]]
[[zh:ASP.NET]]