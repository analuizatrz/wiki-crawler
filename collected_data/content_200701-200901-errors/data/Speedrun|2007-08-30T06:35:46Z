<div class="messagebox cleanup metadata">
{| style="width:100%;background:none"
|'''This article is being rewritten at [[Talk:Speedrun/rewrite]].'''</small>
|}</div>
{{portal|Video games}}
A '''speedrun''' ([[IPA chart for English|IPA]]: {{IPA|/ˈspiːdˌɹʌn/}}) is a play-through of a [[computer game|computer]] or [[video game]], created with the intent of completing it as quickly as possible, optionally under certain conditions, mainly for the purposes of entertainment and competition. The term, a [[Compound (linguistics)|compound]] of the words ''speed'' and ''run'' (as in “running” through a game, referring to the playing of a game) is only used in the context of games that were not originally or primarily designed with fast completion in mind; one generally does not “speedrun” a [[racing game]] (in those cases the game's standard setting for achieving and recording fast times is called a [[time attack]] or [[time trial]] mode).<ref name="TimeAttack">Although the term “time attack” is used to indicate a playthough of a game's dedicated mode for achieving fast completions, the term “[[wiktionary:タイムアタック|タイムアタック]]” (''“taimuatakku”'') is the dominant terminology for both unassisted and tool-assisted speedruns in [[Japan]]. There is no commonly used [[loanword]] deriving from the term “speedrun”.</ref> Speedrunning is often seen as a display of [[skill]] and is practiced [[competitive]]ly, as a [[pastime]], in [[Internet]]-based [[virtual community|communities]], on which the resulting movies are released as rendered multimedia versions such as [[AVI]] files.<ref name="DemoFormat">Despite a large majority of speedruns being released in a video format, and this largely being the preferred format due to the number of players that can be used to open it, some (game-specific) communities utilize a game's native demo format due to these inherently being much more compact and thus easy to share; even such communities encode major releases in a more ubiquitous format.</ref>

In order to attain the highest possible quality of play in a speedrun, the author usually has to look at and think about the game differently than most casual gamers would. Generally, games' physics engines are not flawless and will allow the runner to do unexpected things that could save time. Despite their inherent differences, game engines seem to share a lot of common traits in this context, such as sufficient complexity to warrant a route to be mapped prior to the making of the run; the ability to disjunct the common sequence of events in a game and thus skip entire parts of it, or [[sequence breaking]]; and the ability to use programming errors, or [[glitches]], to one's advantage.

Some games have been considered to be ideal specimen for fast completion purposes, and have been supported fanatically by practitioners who have built [[virtual community|virtual communities]] around them, which provide (or have provided) a highly active platform for the discussion and exertion of speedrunning one or more particular games.

== Overview ==
[[Image:Bombchu1.jpg|thumb|280px|J. Harden performs a mid-air [[damage boosting|damage boost]] to access Hyrule Castle Courtyard early in his 2 hour, 33 minute ''[[Ocarina of Time]]'' speedrun.]]
In its very essence, a speedrun can be described as an exceedingly skilled playthrough of a particular video game or part thereof in a competitive matter, which is usually recorded for either verifiability or simply entertainment purposes. Verifiability may be described as stemming from the necessity to provide evidence that one's playthrough went by the typical or game-specific speedrunning rules and thus counts as a valid attempt to beat the record. Entertainment has traditionally been the reason for the creation of speedruns, as it stems from enthusiasts who began comparing each others' playing skills via movies exchanged over the [[Internet]].

The bare requirements for the creation of a speedrun pertain to one's ability to play the game; skillful playing is crucial, along with good knowledge of the game, as a player must know exactly what to expect during an intensive “run” through the game, and also realize the most optimal method to do so. Lastly, the making of a speedrun requires perseverance, as it relies heavily on luck in addition to skill (the latter has been described as “that which makes it possible”, while the former is seen as “that which makes it happen”), and thus requires persistence during the course of action, regardless of difficulties, obstacles, or discouragement.<ref name="KayBerntsen">{{Cite web | year = 2005 | url = http://speeddemosarchive.com/quake/demos/NR/e1m1_024.dz | title = e1m1_024.txt | publisher = Speed Demos Archive | author = Berntsen, K. | accessmonthday = March 26 | accessyear = 2006}}</ref> Despite this, speedrunners will usually cease their attempt in case a mistake is made, depending on how it could affect the run's outcome; breaking previously set records is the goal for many runners, and one must keep in mind that even the slightest mistake could null one's chances of doing so, especially if the holder of the current record did not make that same mistake. For example, in [[Quake speedrunning|''Quake'' speedrunning]], mistakes as small as missing a single shot could be reason enough to stop the current attempt and try again, as years of intensive competition have brought about very high quality standards; there is a lower threshold for less popular games, however. Runners practice intensively to attain the ability to play at such a high level of skill for usually months, but sometimes even up to years (especially in the case of constantly updated speedruns or those for which entire Internet communities have been set up, such as [[Quake]]). For example, Mike “TSA” Damiani, the author of a speedrun for ''[[The Legend of Zelda: Ocarina of Time]]'' wrote this about his record achievement:<ref name="ZeldaOoTSS457">{{Cite web | year = 2005 | url = http://speeddemosarchive.com/OcarinaOfTime.html | title = The Legend of Zelda: Ocarina of Time | publisher = Speed Demos Archive | accessmonthday = October 7 | accessyear = 2006}}</ref>
{{PQuote|[...] back in the day, I played Ocarina of Time more times than I can count. I was quoted as saying I played this game for 10,000+ hours, when in actuality, it's probably closer to 25,000 hours. I mean I played this game non-stop for over two years. It's not even a matter of ability anymore when it comes to Ocarina of Time. It's just part of my nature when it comes to this game, it's just so natural. I'm sure there are others out there who share this same experience with other games.|Mike “TSA” Damiani}} 
Depending on the popularity of the game, it may be so that a generous amount of practice is required in order to attain such a quality of play that one may attempt to beat the record.

=== Classification ===
There are two major [[genre]]s in speedrunning: “unassisted” or “regular” speedruns, and “[[Tool-assisted speedrun|tool-assisted]]” speedruns.<ref name="UnAssisted">The term “unassisted” or “regular” speedrun is a [[retronym]], invented after tool-assisted speedruns came to be.</ref> Unassisted speedruns are done in real-time using only whatever features there were in the actual game on the original hardware, while tool-assisted speedruns also use features found outside the game in order to create the movie, such as the “[[save state]]” feature found in [[emulator]]s (which is called [[re-recording (video gaming)|re-recording]] in this context).

Among the subgenres, there are two major categories: “any%”, and maximum or “100%” speedruns. Any% runs involve the player aiming to complete the game as quickly as possible, skipping as much of the game as needed, while 100% runs require that as much of the game is played as possible, such as killing all enemies in the game, collecting every [[item]] available, or completing all goals or missions. Some runs fall into the “low-percentage” or “low%” category (sometimes also called “minimalist”), where the fastest time is attempted while collecting only the bare minimum amount of items, [[power-up]]s or abilities required for completion.<ref name="MinimalistTerm">Any% runs are sometimes called “minimalist” runs (the rationale being that one creates the runs with a minimal set of limitations), most notably by [[Twin Galaxies]]. This usage of the term is generally considered erroneous by the speedrunning community.</ref> These are usually slower than the any% runs due to extra time spent killing enemies with lesser abilities or actively avoiding items.

The creation of a speedrun is usually done by one person, and sometimes by a whole team.<ref name="OnePerson">Even in non-collaborative speedruns, it is not always the case that just one person is the player; a game will sometimes permit multiple players to cooperate while playing the game. A speedrun done by a team, however, indicates that players record segments of a game until it has been fully completed rather than cooperating during gameplay. See ''[[Quake done Quick]]'' for a notable example.</ref> By one person, it can be done in one play session (a single-segment speedrun) or multiple (a multi-segment or segmented speedrun; usually replaced by the number of segments: “in ten segments”). Segmented speedruns are done by defining what a game's divisions are in order to run them separately, in multiple sessions (usually separated by [[save point]]s). This allows for a higher level of perfection because the entire game does not need to be run all at once; runners can redo small parts of a game as many times as they need to until they are satisfied with the result; it's for this reason that segmented speedruns are exclusively faster than their single-segment counterparts. It is normal, however, that the individual parts are done in order of appearance in the game, since the actions taken in one segment would affect later segments; such as the weapons that one obtains in a [[first-person shooter]] or the experience points that one attains in a [[role-playing game]].

=== Rationale ===
As was previously noted, speedruns stem from the closely related act of [[sequence breaking]], and were traditionally made mostly for reasons of entertainment and competition, initiated by enthusiasts from online [[Internet]]-based [[virtual community|communities]] who wanted to compare each others' skills. This is still the incomparably dominant reason for the creation of speedruns today, although the competitive aspect of it has become increasingly important, especially since efforts to help people publish their speedruns started being exerted by the [[Speed Demos Archive]] team. When [[tool-assisted speedrun]]ning was introduced, reasons for the making of a speedrun that pertain only to this special category of runs were invented (in addition to the usual ones): they argued that the runs they were producing could be considered a form of [[art]], claiming that they significantly hold “creativity, variability, surprising outcomes, and speed”, which makes them “beautiful to watch”.<ref name="WhyAndHow">{{Cite web | year = 2006 | url = http://tasvideos.org/WhyAndHow.html | title = Why And How | publisher = TASVideos | author = TASVideos contributors | accessmonthday = March 27 | accessyear = 2006}}</ref> They also function as proof-of-concept demos for the making of unassisted speedruns or as visual walkthroughs. The tool-assistance community also further defined exactly what entertainment in a speedrun should imply: it should be interesting (as in not slow, boring or repetitive), it must be surprising (the runner must do the unexpected in order to do so), and it must be skillful (the player must be able to handle awkward situations efficiently and creatively).<ref name="WhyAndHow"/> Due to the fact a tool-assisted speedrun cannot be expected not to strictly try to adhere to these requirements, as it is easily possible to redo segments of a run in case it is determined that it is not entertaining enough, it is also stressed that they do not necessarily pertain to unassisted runs; despite that, unassisted runs usually do conform to them quite naturally, as a high level of playing skill may ensure this.

== History ==
''[[Doom]]'' developed what might have been the first online speedrunning fanbase, emerging in 1994 around [[newsgroup]]s, [[File Transfer Protocol|FTPs]] and [[website]]s that collected demos (see [[Doom speedrunning]]). Speedrunning entered mainstream with the famous ''[[Quake done Quick]]'' demo for Quake created by the eponymous group. QdQ also produced ''Quake done Quicker'', which was later made obsolete by ''Quake done Quick with a Vengeance'', and ''Scourge done Slick'', movies which in addition to top-notch speedrunning skills featured humorous plot and camerawork, making QdQ one of the pioneers of the [[machinima]] community.

It could be argued that all of the ''[[Metroid]]'' games were among the first to have major speedrun challenges. They have built-in rewards for speed in the form of earning better endings for beating the game faster. However, even earlier games like ''[[Super Mario Bros.]]'' would reward the player with points for completing levels quickly.

{{section-stub}}

== Common techniques ==
In order to attain the fastest possible time in a speedrun, the author usually has to look at and think about the game differently than most casual gamers would. Generally, games' physics engines are not flawless and will allow the runner to do unexpected things that could save time. Despite their inherent differences, game engines seem to share a lot of common [[traits]] in this context.

=== Route planning ===
[[Image:Bombmanmap.png|thumb|280px|Route planning sheet for the [[Robot master#DRN_series|Bomb Man]] stage in Joel Yliluoma's ''[[Mega Man (video game)|Rockman]]'' tool-assisted speedrun]]
An essential part of speedrunning is to find the most optimal feasible [[route]] that leads to the completion of the game (or segment thereof). A route, in the context of speedrunning, is a course of action with which to get from one point in the game to another. The need for determining such a route stems from the complexity of the separate areas in which the gameplay takes place. For example, a [[Level (computer and video games)|level]] designed as a [[maze]] will require extensive planning to ensure that the best method for passing the area is found. Even in games in which the levels seem fairly straightforward, it is often required that a route is taken that ensures some kind of advantage; such as a certain degree of safety or beneficial [[item]]s that can be found along the way, as an “optimal” route is designed not only to be fast, but also to take into account the effect it might have on other resources that might affect later levels. The need for the construction of a route depends on the structure of a level.<ref name="rebell.at">[http://www.rebell.at/?cnt=artikel&id=728 http://www.rebell.at/] Half-Life „In 45 minutes und 45 seconds ...“</ref> 

In highly [[linearity (computer and video games)|non-linearly]] structured games there is often no obvious choice, as there might be many choices that the player can choose from that require extensive research to appraise. For example, the shortest possible route might contain so many obstacles that it is virtually impossible to use; it is therefore often necessary to find a compromise between ease and distance. Depending on how the player's skill improves, faster but increasingly difficult routes may be chosen; record times for this reason mostly utilize the most highly yielding route, depending on the popularity of the game — it is nearly impossible that a fair degree of competition will not force players to get the advantage by taking the routes that have the most potential. Contrary to strictly linear levels which can only be finished using one predetermined route, there are games in which levels leave a lot of room for [[creativity]] in its playthrough.

While route planning may seem like simply the planning out of a route that allows one to efficiently finish a level, it also pertains to other aspects of a game that incorporate choice. For example, one may find that when allowed to choose between several starting conditions, such as the choice to play the game with a certain type of character, will also greatly affect the feasibility of a playthrough. In the game ''[[Hexen]]'', for example, we are allowed to choose between three different “classes” of characters, one being a knight (who is agile and strong), a mage (who is slow, yet has powerful magic abilities) and a cleric (a versatile combination of both); speedrunner “Cacodemon Leader” found out that the cleric was the most feasible character to play the game with, as it isn't as slow as the mage in the beginning, yet does gain a significant usability boost near the end of the game (which the knight does not), thus yielding the best outcome in the end.<ref name="HexenDeVore">{{Cite web | year = 2003 | url = http://www.doomworld.com/sda/hh.htm | title = Opulent's Pwad Demos Page | publisher = Doomworld | author = Doug “Opulent” Merrill | accessmonthday = September 19 | accessyear = 2006}}</ref> Runners would describe this choice as obvious, seen as how it simply allows the runner to finish the game more efficiently. And yet, it may not be optimal if the goal of a speedrun were to change. After all, we see that the knight is a very strong character in the beginning of the game; if the speedrun's goal were to finish only the first cluster of levels, then the knight, who is able to rush through the first few levels with relative ease, would likely be the most useful character; if the speedrun's goal were to finish using only the first weapon in the game, the mage would be the strongest, as the mage's first weapon continues to be viable even during later levels. A separate rationale, and a very important aspect of this form of route planning, is that some cases may be described as [[Tier|tiers]] as well; using Hexen as an example again, we find that some runners might want to do a run on the game using the knight or mage anyway, even if this ensures a slower playthrough than when the cleric is used, simply in order to set a fastest time using a different character choice as prerequisite. Such runs are then in a separate category than the “main” run which would still pertain to the cleric. In essence, this is the same as the difference between other differences in classification, such as 100% and any% runs. The possibility to run through a game faster by using a superior strategy that spans across the game in its entirety depends on its [[linearity]]. The more linear the game is, the less able a player will be to alter the large-scale route of play, as there simply will not be many choices to take or affect.

The amount of planning that can go in both the level sequence and the actual gameplay may vary a lot and be disproportionate; one might spend a lot of time planning out the route of an individual level while the general route in the game is relatively straightforward, for example. On the contrary, one may also find that the route of an entire game is much more important than the planning out of individual levels, as would be the case with many racing games that incorporate a certain degree of strategy, ''[[Gran Turismo (video game)|Gran Turismo]]'', a racing game in which the player is able to buy different cars and upgrades, being an example; the speed at which one can play this game depends almost entirely on the choices made outside of racing, as a player will have to plan out which of the in-game racing tournaments he will attend to be able to get to the point where he can attempt the final one as quickly as possible.

While this type of strategic route planning is essential, there are other (usually highly linear) games in which it is useless. In that case, runners are often presented with extensive methods for optimizing routes for individual levels or segments of the game. A good example is [[Quake]], in which we can find many good examples of the effect that route planning can have on the outcome of a speedrun, as even years after the initial versions of its speedrun routes there are still additional shortcuts being discovered that can speed up one's progress. One notable example of a level which has undergone a lot of route changes in this game is E4M3 [http://speeddemosarchive.com/quake/mkt.pl?level:e4m3] (''The Elder God Shrine'').<ref name="LevelNames">Some first-person shooters, including many early [[Doom engine]] games such as [[Doom]] and [[HeXen]], refer to its [[Level (computer and video games)|levels]] by their internal names rather than the actual titles given by their designers; for example, E2M4 refers to the fourth map of the second episode.</ref> Originally, the route for this map was very long and involved going through the [[graveyard]] in addition to many other things. After the release of the first [[Quake done Quick]] video, in which this route was recorded as a 1:21 run by Yonatan Donner, it was found out that a large part of this route could be skipped by using a [[slope jump]] in the starting room, leading to Donner improving his run to 0:57.<ref name="QuakeDoneQuick">{{Cite web | year = 1997 | url = http://qdq.planetquake.gamespy.com/all_1949.txt | publisher = Quake done Quick | title = ALL_1949 | author = Donner, Y., Belz, M., Pflug, N., & Bailey, A. | accessmonthday = December 25 | accessyear = 2005}}</ref> This was the basic foundation of the map's route, which is still being used today: do the slope jump, get the silver key, run back to the start room, jump to the other side, get the gold key, and exit. A variety of new shortcuts were found since then, constantly updating the optimal route. Following Donner's record, “DooMfienD” used an in-flight [[grenade jump]] from the back of a [[Fiend]] rather than one from balcony to balcony in order to get to the other side of the start room. He also added a grenade jump at the silver key and got 0:55 for Quake done Quicker.<ref name="QuakeDoneQuicker">{{Cite web | year = 1997 | url = http://qdq.planetquake.gamespy.com/all_1635.txt | title = Quake done Quicker | publisher = Quake done Quick | author = The Quake done Quick team | accessmonthday = December 25 | accessyear = 2005}}</ref> Markus Taipale later replaced this with a [[Bunny hopping|bunny hop]].<ref name="BunnyHopReference">See [[Notable games for speedrunning#Techniques|section “Quake”, “Techniques” in ''Notable games for speedrunning'']].</ref> Evan Wagner ran 0:54 by adding a grenade jump from the [[Knight]]s near the gold key and an additional boost in a long hallway. These additional grenade jumps became possible due to more efficient health usage attained by picking up the second large health upgrade when returning at the starting point rather than when starting. Ilkka Kurkela added bunny hops to get 0:50. The grenade jump at the silver key went through a few revisions (being replaced by a double grenade jump or a quad boost) but was eventually reverted to DooMfienD's original method because the health was needed for a much more important trick devised by Markus Taipale: a Fiend boost after the start, and a [[Quad Damage]] grenade jump at the gold key that carries the player at full speed nearly all the way to the exit. Combining all of these tricks, Markus was able to record 0:40 for Quake done Quick with a Vengeance, a run which he later improved to 0:37.<ref name="QuakeDoneQuickWithAVengeanceImprovements">{{Cite web | year = 2002 | url = http://qdq.planetquake.gamespy.com/all_1635.txt | publisher = Quake done Quick | title = Quake done Quick: improvements | author = Pflug, N. | accessmonthday = December 25 | accessyear = 2005}}</ref> 

Even so, this route was still not optimal, as proved by Peter Horvath, who added a grenade jump from a Spawn in the lava near the silver key — labelled by the team as a “never-thought-of-before trick” — which gave him the currently fastest time of 0:33.<ref name="QuakeDoneQuickWithAVengeancePartII">{{Cite web | year = 2006 | url = http://speeddemosarchive.com/quake/projects/qdqwavp2/ | title = Quake done Quick with a Vengeance Part II | author = The Quake done Quick team | publisher = Speed Demos Archive | accessmonthday = November 18 | accessyear = 2005}}</ref> While this route is currently believed to be optimal, Horvath himself admits that it is still possible to improve on his play.<ref name="PeterHorvath">{{Cite web | year = 2006 | url = http://speeddemosarchive.com/quake/projects/qdqwavp2/demos/e4m3_033.dz | title = e4m3_033.txt | publisher = Speed Demos Archive | author = Horvath, P. | accessmonthday = October 9 | accessyear = 2006}}</ref>

=== Sequence breaking ===
Aside from route planning, there are multiple other commonly utilized techniques that are separate from the typical prerequisite of excelling playing quality. With the previous paragraph in mind, it is implied that the best routes rarely rely upon the paths and progressions that were designated by the developers; skilled players will usually discover ways to finish parts of the game in a different order than was intended, and they consequentially often find ways to skip parts of a game entirely. Using these shortcuts, which are closely tied to route planning in that it builds upon it by providing additional strategic depth, is called “sequence breaking”. Sequence breaks are often possible because their existence has been overlooked by the developers, or via a glitch (see [[Speedrun#Glitches|section “Glitches”]] for an explanation). Usually, only shortcuts that are believed to not be part of the gameplay as the designers had intended it are considered to conform to the definition.

[[Image:Sm64_mips.png|thumb|240px|left|Eddie “kirbykarter” Taylor using a [[Speedrun#Glitches|glitch]] that involves [[MIPS (character)|MIPS]] to board [[Bowser (Nintendo)|Bowser's]] [[Submarine|sub]] before the game, ''[[Super Mario 64]]'', is supposed to allow the possibility. This allows the runner to skip a total of 54 stars and save around 50 minutes of time; see a video of this trick being performed below.]]
The first documented action in a video game to be called a sequence break occurred in the [[Nintendo GameCube]] game ''[[Metroid Prime]]''. It was called “Gravity Suit and Ice Beam before Thardus”; using the since then common “''x'' before ''y''” notation in the nomenclature of sequence breaking (as the disjunction of sequences is the essence of such events). [[Creatures in the Metroid series#Thardus|Thardus]] was designed to be a mandatory boss before the [[Gravity Suit#Gravity Suit|Gravity Suit]] and [[Ice Beam#Ice Beam|Ice Beam]] could be obtained, hence the novelty of bypassing the boss while still obtaining the items. This was first achieved by Steven Banks on January 18, 2003, after the possibility of such an act was suggested by “kip”, an online persona and important Metroid speedrunner whose real name is unknown.<ref name="DiscoveryOfSequenceBreaking">{{Cite web | year = 2003 | url = http://www.metroid2002.com/sequence_breaking_topics_tbj_V1.0.php | title = Ice Beam + Gravity Suit before Thardus using Triple Jump | publisher = Metroid 2002 | author = “Banks17” | accessmonthday = May 6 | accessyear = 2006}}</ref> Banks posted his findings about the act being possible on the Metroid Prime message board on [[GameFAQs]] in a thread which attracted a number of interested gamers. The gamers quickly became a separate community and strove to accomplish more and better feats in the game. It is currently assumed that the term, as used in this context, was first coined by a person known online as “SolrFlare” in this thread on February 5, 2003.<ref name="SequenceBreakingCoinage">{{Cite web | year = 2003 | url = http://www.metroid2002.com/sequence_breaking_topics_tbj_V4.0.php | title = Metroid Prime Sequence Breaking (v. 4.0) [Previously Ice+Grav before Thardus&#93; | publisher = Metroid 2002 | author = “SolrFlare” | accessmonthday = May 6 |accessyear = 2006}}</ref> Thus, the term remains most often applied to the Metroid Prime series of games, as opposed even to other games in the Metroid series or games in general (in other contexts, it is also simply called a [[shortcut]]).<ref name="MetroidReference">See [[Speedrun#Metroid series|section “Metroid series”]].</ref> Sequence breaking has become an integral part of speedrunning and has been applied to many other games besides those from the Metroid series. It is always considered a possibility when planning a speedrun.

Sequence breaking methods are usually discovered after new techniques have been found. A runner has to adapt his strategy to make the most of such new techniques, which may also create opportunities to skip parts of the game, if the techniques are beyond typical gameplay. A well-known trick for sequence breaking in [[first-person shooter]]s is the so called “[[rocketjumping|rocket jump]]”, which consists of intentionally jumping over a [[land mine|mine]] or [[shrapnel]] while it is exploding, or while shooting the ground with a [[rocket launcher]]. The propulsion from the explosion allows the player to jump higher than normal, reaching nearby but otherwise unreachable places. Obviously, the player incurs significant damage from the explosion; one usually has access to a limited number of rocket jumps in one level before a next one would cause the character to die. For that reason, rocket jumps require extra planning to make the greatest usage of the health that is available in the level, both directly (through health packs that are found on route, for example), or indirectly (such as by taking a detour to get more health if the resulting rocket jump capabilities will make up for the time lost to obtain the health). 

[[Image:E3m2trigger.png|thumb|400px|right|The “[[Event-driven programming|trigger]]” object on the foreground (highlighted in red) is bypassed in a creative way, allowing an unreachable key (not pictured) to be grabbed; if the player were to touch the trigger object, the key would be transported out of reach.]]
In another example (again, from the Quake done Quick speedruns), the runner jumps to an otherwise unreachable key (used to open up a door that leads to the exit) by deliberately getting hit by a [[gibs|gib]] that was fired at him by a nearby zombie at the beginning of E3M2 [http://speeddemosarchive.com/quake/mkt.pl?level:e3m2] (''Vaults of Zin'').<ref name="SequenceBreakingExample">{{Cite web | year = 2006 | url = http://www.fileplanet.com/dl/dl.asp?qdq/qdqwav.dz | title = History of the routes in QdQwav | publisher = FilePlanet | author = The Quake done Quick team | accessmonthday = March 26 | accessyear = 2006}}</ref> By getting hit by the gib, the runner gains additional upwards [[momentum]], which, if done right, can carry one over the trigger that would activate a [[QuakeC]] script which would move the key out of reach when touched. This technique requires precise timing and practice, and ultimately also a lot of luck.<ref name="LuckReference">See [[Notable games for speedrunning#Techniques 2|section “Doom”, “Techniques” in ''Notable games for speedrunning'']].</ref> Since the level is centered on finding an alternative way to reach the key, the sequence breaking permits the runner to skip almost the entire level.

One famous example of sequence breaking is a series of glitches which allow ''[[Super Mario 64]]'' to be completed after collecting only 16 stars (as opposed to 70, which is the game-legitimate minimum); the game can be completed in less than twenty minutes by doing so.<ref name="SuperMario6416Star">{{Cite web | year = 2005 | url = http://speeddemosarchive.com/Mario64.html | title = Super Mario 64 | publisher = Speed Demos Archive | accessmonthday = March 25 | accessyear = 2006}}</ref> The tool-assisted run of the game utilizes a similar series of glitches to complete the game after collecting only 1 star, allowing a time of under 7 minutes to be achieved.<ref name="SuperMario641Star">{{Cite web | year = 2007 | url = http://tasvideos.org/1657S.html | title = tool-assisted Super Mario 64 | publisher = TASVideos | accessmonthday = August 9 | accessyear = 2007}}</ref>

=== Glitches ===
<!--[[Image:Collision.svg|thumb|260px|right|Image depicting how collision detection can fail: hit box ''a'' is moving at a speed of 4 pixels per frame (''c'') and is able to pass through a 4×4 pixel area of hit box ''b'' with no problem.]]-->
Sometimes a [[glitch]] will allow for an interesting speedrunning opportunity. When running a game, it is sometimes possible to use the physics of the game to do things that would normally seem out of ordinary gameplay possibilities.

The classic example, which has been possible since the early years of video games, and can be found in modern game engines even today, is being able to walk through an enemy due to a simplistic “close approach” [[collision detection]]; since games usually don't do pixel-precise collision checks, it is sometimes possible to touch and even go partially inside the enemies without getting hurt. This is due to the so-called “hit boxes”, which detect whether an object is inside another and are often smaller than the sprites or models of enemies themselves. Additionally, if one is moving very fast, it's sometimes possible to go through objects because the game does not render a frame in which one is inside the object. Combined with the close approach collision abuse, the speed may not even need to be very high. For example, if a hit box ''a'' is moving diagonally upwards and to the right at 4 pixels per frame towards hit box ''b'', it could pass through an area of 4×4 pixels.<!-- Thus, <math>\mathrm{Passable\ area} = \mathrm{Horizontal\ speed\ of\ object}\,\times\,\mathrm{Vertical\ speed\ of\ object}</math>.-->

Similarly, by various means (such as pushing into corners in strange ways or getting pushed by an enemy), one may sometimes get inside the floor, walls, or ceiling. While it might be that the player just gets stuck and ruins his game because he now can now no longer continue, it might also allow the usage of new routes that did not exist before. For example, one might be able to jump out of the clipping zone very easily, allowing the complete passing through it. Because of close approach collision detection being so simple to most games, it is made to look accurate by “ejecting” the object if it ends up partially inside a wall or other impassable zone. It also ensures the character can't get stuck inside a wall because of simple programming. Visually, this appears as scrolling: the game automatically moves the object that's inside the wall, usually horizontally and to the right, until it finds a place where it can exit the wall. When this happens, sometimes the game will even push the player further into the wall. This trick, called “zipping”, can be used to take radical shortcuts in games, but are usually too difficult to pull off consistently in most unassisted speedruns.

Another commonly used technique is the usage of temporary invulnerability given to the player by the game, usually straight after getting hit by an enemy. Most games visualize this invulnerability by making the player character flicker. This is to prevent the player from immediately getting hit again, but can sometimes also protect him from instant death hazards, such as deadly spikes or lava. It can also be used to pass through monsters that would otherwise take more time to destroy, or to pass through other nearby monsters that would do more damage. Temporary invulnerability is also usually given to the player during a [[cutscene]] that cannot be interrupted, such as a story dialogue or the animation for finishing a level. If the player touches something lethal during this state of game, the game may very well ignore it and let him continue like nothing at all has happened. A good example is [[Tenchu]], in which all cutscenes happen in the same environment as the [[gameplay]]. Since the state of the environment is carried over to the cutscene, it is possible to, for example, place a mine on the path of one of the acting characters; the character will walk over it, trigger it, get set on fire, and yet continue partaking in the scene as if nothing happened.

Many polished and acclaimed speedruns are filled with glitch abuse, but the usage of several inconspicuous glitches may be left unnoticed by casual gamers.

== Tool assistance ==
{{weasel}}
{{main|Tool-assisted speedrun}}
A tool-assisted speedrun (commonly abbreviated TAS) is a speedrun movie produced with the use of tools such as [[slow motion]] and [[re-recording (video gaming)|re-recording]]. The basic premise of these runs is that a “tool” (like an emulator that provides the author with slow motion and re-recording functionality) is used in order to overcome human limitations such as [[skill]] and [[reflex]].<ref name="WhyAndHow"/> These tools are used to create theoretically “perfect” runs.

Tool-assisted speedruns are mostly done with emulators for old console systems. Emulators that currently feature the tools necessary to create these tool-assisted speedruns include the [[Nintendo Entertainment System|Nintendo]] emulators [[Famtasia]], [[FCE Ultra]] [http://tasvideos.org/forum/viewtopic.php?p=12395#12395], [[Nintendulator]] and [[VirtuaNES]], the [[Super Nintendo Entertainment System|Super Nintendo]] emulators [[Snes9x]] [http://tasvideos.org/forum/viewtopic.php?p=25682#25682] and [[ZSNES]] [http://tasvideos.org/forum/viewtopic.php?p=28430#28430], the [[Sega Mega Drive/Sega Genesis|Genesis]] emulator [[Gens (emulator)|Gens]] [http://tasvideos.org/forum/viewtopic.php?p=4577#4577], the [[Game Boy Advance]] emulator [[Visual Boy Advance]] [http://tasvideos.org/forum/viewtopic.php?p=30138#30138], and the [[Nintendo 64]] emulator [[Mupen64]] [http://tasvideos/forum/viewtopic.php?t=2934].

The tool-assisted speedruns try to avoid comparisons to the unassisted runs, as this would be unfair to the players. In unassisted runs, it would be unacceptable to use emulator's save-state features to take a shorter but more dangerous path, saving the game when passing an obstacle. Tool-assisted speedruns also abuse glitches that are sometimes impossible to replicate in unassisted play, causing more separation between the categories. 

Ideally, tool-assisted speedruns are not created to show off one's playing skills, but rather to show off all kinds of techniques that are theoretically possible in the game but impossible to do in practice, and to try and establish an “optimal” playthrough of a game. Because of this, tool-assisted runs discern themselves by pushing the gameplay to the physical limits of the game's engine. This is extensively demonstrated in the Mega Man [http://tasvideos.org/movies.cgi?id=515] and Rygar [http://tasvideos.org/movies.cgi?id=391] runs.

While speed is desired in these runs, the focus is on entertainment. For example, there is a famous tool-assisted speedrun of ''[[Super Mario Bros. 3]]'' by “もりもと” (“Morimoto”) that finishes the game in approximately 11 minutes; the fun is in the breathtaking speed and overall unfathomable method at which the game is being played, not the presumed skills of the runner.[http://www.archive.org/details/smb3dq] The video has since been rendered obsolete by a faster tool-assisted speedrun, but this video is still the most famous example of its kind.

The controversy revolves around the similarity between the finished products. Websites exist dedicated to each side in the hopes that the movies will be considered separate. However, some individuals have allegedly tried to submit tool-assisted speedruns as unassisted speedruns. Without careful analysis, it is sometimes hard to tell the difference between the two, and this has been said to undermine the effort put into unassisted speedruns.

[[Image:Updowntrick2.gif|frame|center|[[Tool-assisted speedrun]]s usually extensively abuse glitches, such as this zipping trick, which makes travelling through walls possible. Contrary to how it may seem, the game (''[[Mega Man (video game)|Mega Man]]'') was not modified for the production of this image; the [[input]] used is fully “legal” and accepted by the game.]]

== Notable games for speedrunning ==
{{Main|Notable games for speedrunning}}
Traditionally, speedruns have been performed by members of [[Virtual community|online communities]] about games in general, usually through [[Internet forum|discussion forums]], using strategies devised by members of such forums. When the activity became popular enough to acede [[subculture]], the first sites dedicated to speedrunning started appearing — usually specializing in just one or a few games. Some of these sites have sustained activity for a long time, sometimes even up to today, due to the large potential its games have for speedrunning.

Only the most noteworthy games that have been proven to be ideal for speedrunning purposes have been listed here with a short description on the histories of the communities that surround it. There are other games which have been fought over actively by many runners but don't have large or active collaboration websites dedicated to it (and haven't in the past); information on these games may be found in ''[[Notable games for speedrunning]]''.

=== Quake ===
[[Image:Q1scr_0.png|frame|right|Peter Horvath doing a [[grenade jumping|grenade jump]] on a Spawn in E4M3 [http://speeddemosarchive.com/quake/mkt.pl?level:e4m3] (''The Elder God Shrine'') in order to jump over a large lava pit.]]
''[[Quake]]'' is arguably the only game to rival ''[[Doom]]'' as the most popular game to speedrun ever.<ref name="MostPopular">This statement is based on both the amount of demos and the total amount of recorded demo time, which far exceed those of other games that are popular with speedrunners.</ref> People first started recording demos of Quake playthroughs when it was released in June 1996 and sharing them with others on the <tt>demos/e</tt> directory in [[Simtel|Cdrom.com]]'s Quake file hierarchy. There were two distinct kinds of demos: those in which the player killed all monsters and found all secrets on the map (called 100% demos) and those in which the player ignored these goals in order to finish the level as fast as possible (called runs). All levels were, at that time, recorded solely on the “Nightmare” difficulty level, the highest in the game.

In April 1997, Nolan “Radix” Pflug first started the Nightmare Speed Demos web site to keep track of the fastest demos. The first ''[[Quake done Quick]]'' [http://speeddemosarchive.com/quake/qdq/] project was finalized in June that same year. Quake done Quick, unlike the conventional record demos, featured a full playthrough of the game, carrying over one level's finishing statistics to the next. The project ended up finishing the entire game on Nightmare difficulty in 0:19:49 [http://qdq.planetquake.gamespy.com/qdqr.html]; an astonishment at that time. The run was “recammed”, reconstructed so that it could be also viewed from a third-person perspective, which gained it its [[machinima]] status and arguably had made it more comprehensible and entertaining for a wider audience. It received widespread attention from gaming magazines, being distributed with free [[Compact disc|CDs]] that usually came with them. This popularized speedrunning for a much larger audience than before and attracted many newcomers. Not all of those newcomers agreed with the old-timers' dogma that runs should be made on the hardest possible skill level. Thus, in August 1997 Muad'Dib's Quake Page came to be, run by Gunnar “Muad'Dib” Andre Mo and specializing in “Easy” difficulty runs. One month after that, the famous Quake done Quick movie was superseded by a new movie called ''[[Quake done Quick]]er'', on September 14, 1997, which improved the game's fastest playthrough time to 0:16:35.[http://qdq.planetquake.gamespy.com/qdqr.html]

In April 1998, Nolan and Gunnar merged their pages, thus creating [[Speed Demos Archive]], which today is still the central repository for Quake speed demos of any kind. Ever since its creation, a large variety of tricks have been discovered in the Quake physics, which kept players interested even up to today, almost ten years after Quake's release. Subsequently, ''[[Quake done Quick|Quake done Quick with a Vengeance]]'' was released on September 13, 2000, which featured a complete run through Quake in the hugely improved time of 0:12:23.[http://qdq.planetquake.gamespy.com/qdqwav.html].

As of March 2006, Speed Demos Archive contains a total amount of 8481 demos (on both official and custom maps), accounting for a total time of 253 hours, 44 minutes and 39 seconds.<ref name="QuakeStats">{{Cite web | year = 2006 | url = http://www.archive.org/details/Quake_SDA_collection | title = Quake (PC) - Speed demo collection | publisher = Internet Archive | accessmonthday = March 25 | accessyear = 2006}}</ref> The fastest any% single-segment completion times that have been recorded thus far, as of June 10, 2006, are 0:13:46 [http://speeddemosarchive.com/quake/demos/ER/all_1346.dz] for the easy difficulty run and 0:19:50 [http://speeddemosarchive.com/quake/demos/NR/all_1950.dz] for the nightmare difficulty run, both by long-time Quake runner Connor Fitzgerald. The 100% single-segment completion times are 0:46:02 [http://speeddemosarchive.com/quake/demos/EH/all_4602.dz] for the easy difficulty run and 0:69:33 [http://speeddemosarchive.com/quake/demos/NH/all_6933.dz] for the nightmare difficulty run, by respectively Marlo Galinski and Justin Fleck.<ref name="DzipNote">Note that Quake demos are usually stored in the Dzip compression algorithm, which was specially developed for these files by Nolan Pflug and Stefan Schwoon. It is available for free download at the [http://speeddemosarchive.com/dzip/download.html Dzip Online] Web site.</ref> Additionally, a new Quake done Quick movie with the working title ''Quake done Quick with a Vengeance Part II'' is in the making. The improvements that have been made thus far would result in a time of 0:11:32 for the entire game, an improvement of 51 seconds.<ref name="QuakeDoneQuickWithAVengeancePartIIProgress">{{Cite web | year = 2006 | url = http://speeddemosarchive.com/quake/projects/qdqwavp2/tables.html | title = Quake done Quick with a Vengeance Part II | publisher = Speed Demos Archive | author = Speed Demos Archive contributors | accessmonthday = May 7 | accessyear = 2006}}</ref>

{{Further|[[Speed Demos Archive]] and [[Quake done Quick]]}}

=== Doom ===
December 1993 saw the release of [[id Software|id Software's]] ''[[Doom]]''. Among some of its major features, like at that time unparallelled graphics, LAN- and Internet-based multiplayer support, and user modification possibilities, it also gave the players the ability to record demo files of their playthrough. This particular feature was first picked up by Christina “Strunoph” Norman in January 1994 when she launched the ''LMP Hall of Fame'' website.

This site was, however, quickly made obsolete by the ''DOOM Honorific Titles'', launched in May 1994 by Frank Stajano, which introduced the first serious competition between players.[http://www.cl.cam.ac.uk/Research/DTG/~fms27/dht/dht5/] This site would create the basis for all DOOM demosites that would follow. The DHT were designed around a notion of earning titles by successfully recording a particular type of demo on pre-determined maps in the [[IWAD]]s. These 'exams' became very popular as the player had to earn each title by sending in a demo of the feat to one of the site's judges to justify his application. Doom II was released in October 1994, and the DHT conformed to the new additions as well as the new Doom version releases. At the height of its popularity, the DHT had many different categories and playing styles. For example, playing with only the fists and pistol while killing all monsters on a map became known as Tyson mode, named after the heavyweight boxer [[Mike Tyson]]. Pacifist-mode was playing without intentionally harming any monsters. Each category had easy, medium, and hard difficulty maps for players to get randomly chosen for. Many legends in the Doom speedrunning scene started out in the DHT, including George Bell (Tyson), Steffen Udluft (Pacifist), Kai-Uwe “Gazelle” Humpert, Frank “Jesus” Siebers (Nightmare), Benjamin "Cowboy" Lauterbach (Reality), and Yonatan Donner. However, the DHT always had trouble retaining a permanent Internet location. This, combined with the changing rules and the diminished importance of most of the titles, made public interest wane as the years rolled on.

In November 1994, the Doom speedrunning scene, in the form of the ''[[COMPET-N]]'' website, took off.[http://www.doom2.net/~compet-n/index.cgi] Its creator, Simon Widlake, intended the site to be a record scoreboard for a variety of Doom-related achievements, but unlike its predecessors, they all centered around one key idea: speed. Players were required to run through Doom's levels as fast as humanly possible in order to attain a spot on the constantly-updated COMPET-N scoreboards which eventually made Doom one of the most popular games for speedrunning.<ref name="MostPopular"/>

Like the DOOM Honorific Titles, this site experienced multiple location changes over time; it was even at [[Simtel|Cdrom.com]] for a while before Istvan Pataki took over as maintainer and moved the site to the now defunct FTP server [ftp://ftp.sch.bme.hu/ ftp.sch.bme.hu]. From there on, since early 1998, it was in the hands of Adam Hegyi, who has been the maintainer ever since. It is currently located at Doom2.net.[http://www.doom2.net/]

As of March 2006, COMPET-N contains a total amount of 6072 demos (on both official and custom maps), accounting for a total time of 462 hours, 8 minutes and 20 seconds.<ref name="DoomStats">{{Cite web | year = 2006 | url = http://www.doom2.net/~compet-n/database/cn.cgi | title = COMPET-N Database | publisher = COMPET-N | accessmonthday = March 25 | accessyear = 2006}}</ref>
{{Further|[[Doom competitive play]] and [[COMPET-N]]}}

=== Metroid series ===
[[Image:Radix137.jpg|thumb|320px|''[[Metroid Prime]]'' completion screen after Nolan “Radix” Pflug's famous 100% speedrun, now made obsolete by an even faster version]]
Released in August 1986, ''[[Metroid]]'' was the first game to introduce special rewards for fast completion times. Featuring highly [[linearity|non-linear]] [[gameplay]], it was possible for a player to extensively search for faster [[Speedrun#Finding the route|routes]] towards the end of the game. This has been researched thoroughly since the game was created, and it has since been concluded that only a few items are necessary to complete the game. 

The release of ''[[Super Metroid]]'' in 1994 greatly increased the quality of Metroid speedrunning. It featured a physics system that allowed for a wide array of skills for mobility, like [[wall jumping]] or the [[Shinespark]], allowing players to skip over large areas of the game, or play through the game in different manners based on how well they could perform these tricks in contextual situations. Additionally, it had the same non-linear gameplay the fans had come to expect from the series. Due to the way the game is laid out, several different run types or [[tier]]s that incorporate different completion percentages have been done (see [[Speedrun#Glossary|section “Glossary”]]). The most popular type is the maximum or 100% run, in which as many items as possible are obtained. Besides it, speedrunners also attempt any% runs, which focus solely on finishing the game as fast as possible with no other prerequisites.[http://speeddemosarchive.com/SuperMetroid.html] One such speed run, created by Brian Hodge, was completed in 0:42 minutes. This has since been recognized by Twin Galaxies as the current any% world record. [http://www.twingalaxies.com/index.aspx?c=22&pi=32&gi=516&vi=545]

The tool-assisted community has also made a run in which as few items as possible are obtained, accounting for a completion percentage of 14%. Even though much fewer items are taken in this run, it's slower than the route in the any% run because of how long it takes to kill [[Ridley (Metroid)|Ridley]] and [[Mother Brain (Metroid)|Mother Brain]] with only the [[Ice Beam]], despite it being unnecessary for completion (as the [[Speed Booster]] may also be used to get past the first [[Zebetite]] as well).[http://tasvideos/movies.cgi?id=260]

Following Super Metroid there was an 8 year gap during which no new Metroid games were released. During this time, the first games in the series were played intensively by dedicated gamers, and many tricks were discovered that allowed players to achieve incredibly short completion times. As the [[Internet]] became more available to the general public, runners began to find each other [[online]]. Groups of players started collaborating on [[Internet forum|message boards]] and sent tricks back and forth to one another, in what became a [[community]] based on playing the games speedily.

The first Metroid community that was created for the purpose of fast completion was ''Metroid Prime Discoveries'', created and led by Jean-Sebastien “Zell” Dubois.[http://membres.lycos.fr/zellmetroid/] Rather than being a site that focused on speedrunning, it was dedicated to documenting the possibilities of sequence breaking in the game ''[[Metroid Prime]]''. When the interest arose to begin the documentation of other games in the series, however, the new site ''Metroid 2002'' was created by Nathan Jahnke in August 2003.[http://www.metroid2002.com/] Initially, the only incentive was to document the two Metroid games released in 2002 — Metroid Prime and Metroid Fusion — but this changed when Nathan was asked to take all content of ''Metroid Online'', another site that had been developed at that time and contained sequence breaking documentation, a message board, and a 1% Metroid Fusion run, and relaunch Metroid 2002 as “the one resource for Metroid Prime sequence breaking info.” This relaunch happened less than two weeks later than the proposition and came to be in November.<ref name="Metroid2002History1">{{Cite web | year = 2005 | url = http://www.metroid2002.com/forum/viewtopic.php?t=3394 | title = history of metroid 2002, part 1 (was: happy birthday, m2k2!) | publisher = metroid 2002 | author = Jahnke, N. | accessmonthday = December 31 | accessyear = 2005}}</ref> Ever since, it has been the central repository for everything related to speedrunning the Metroid series.

It was also in November 2003 that Metroid speedrunning reached its peak, after Nolan Pflug released his 100% run of ''[[Metroid Prime]]'', in which he finished the entire game in 1:37.<ref name="NolanPflug100MetroidPrime">This speedrun has since been replaced with an improved version, and as such, its original host, [[Speed Demos Archive]], no longer makes mention of it. The original announcement, however, may still be found using the [[Internet Archive|Internet Archive's]] Wayback Machine at [http://web.archive.org/web/20031202174746/http://planetquake.com/sda/mp/ http://web.archive.org/web/20031202174746/http://planetquake.com/sda/mp/].</ref> Since it was featured in the games section of [[Slashdot]], it gained widespread attention.[http://games.slashdot.org/article.pl?sid=03/11/10/0655226&tid=213&tid=10] Publications in numerous different languages ran stories on the run, and topics about the run were made on gaming message boards around the world. The first [[Segment (broadcasting)|segment]] of his run was being downloaded over five thousand times a day at the peak of its popularity.<ref name="Metroid2002History2">{{Cite web | year = 2005 | url = http://www.metroid2002.com/forum/viewtopic.php?t=4151 | title = history of metroid 2002, part 2 | publisher = metroid 2002 | author = Jahnke, N. | accessmonthday = December 31 | accessyear = 2005}}</ref> The Metroid 2002 [[Internet Relay Chat|IRC]] channel was flooded with people who had heard about the run and wanted to know more about it, quickly dwarfing the original population, and its [[Internet forum|message board]] saw its member count double in size the month following the run's release. As a result of the popularity of this run, it was decided that in order to best serve the growing bandwidth consumption, Metroid 2002 would have to merge its array of videos with [[Speed Demos Archive]], which was at that time being provided nearly limitless server capacity for their runs on the [[Internet Archive]].

As of June 2007, the best completion time for Metroid Prime is 1:03 by Besmir “Zoid” Sheqi, and the best 100% time was reduced to 1:28 by Paul “Bartendorsparky” Evans, obsoleting Nolan's hugely popular run.[http://speeddemosarchive.com/MetroidPrime.html]

== Notable speedrun records ==
As speedrunning is typically the pastime of Internet communities, most of the produced runs do not get media coverage, even if the phenomenon itself does. Despite this, several runs have been reported on outside of their niche. 
[[Image:Halo2_speedrun.jpg|thumb|320px|Part of Cody Miller's ''[[Halo 2]]'' speedrun.[http://www.archive.org/details/Halo2SingleSegment] Miller is seen using the plasma pistol to remove the shields of [[Covenant Elite|Elites]], after which he will quickly kill them with [[headshot]]s.]]
On August 28, 2005, speedrunner Cody Miller reported that he had finished making a run of ''[[Halo 2]]'' on the “Legendary” difficulty level, the hardest in the game, without dying, in 3 hours and 28 minutes.<ref name="Halo2Topic">{{Cite web | year = 2005 | url = http://forums.bungie.org/halo/archive22.pl?read=642475 | title = Twin Galaxies Bounty Completed *LONG* | publisher = Bungie | author = Miller, C. | accessmonthday = December 21 | accessyear = 2006}}</ref> He states that he initially got the idea from a [[Bounty (reward)|bounty]] of $250 offered by the video game record database [[Twin Galaxies]],<ref name="TwinGalaxiesHalo2Bounty">{{Cite web | year = 2004 | url = http://www.twingalaxies.com//index.aspx?c=46&id=974&pg=10 | title = Twin Galaxies' 2005 Cash Bounties | pages = p. 10 | publisher = Twin Galaxies | author = Mruczek, R. | accessmonthday = December 21 | accessyear = 2006}}</ref> which also outlined the rules to which the run had to conform.<ref name="HaloBaseInterview">{{Cite web | year = 2006 | url = http://www.halobase.de/articles.php?blam=2&c=Artikel&id=83&p=2 | title = Exklusivinterview mit Weltrekordhalter Cody Miller | publisher = Halo Base | accessmonthday = December 28 | accessyear = 2006}}</ref> Although runs confirmed by Twin Galaxies are not usually verifiable by independent parties, as the site upholds a policy of not publishing videos of the recordings they receive in order to protect the record holder's strategies, Miller decided to explain the contents of his run in detail and offer the video for download on the [[Internet Archive]].[http://www.archive.org/details/Halo2SingleSegment] In 2006, this led to his efforts being recognized by ''[[Guinness World Records]]'' — his record was published in the 2007 edition of the book, and he became the first speedrunner to appear in it. The story was noticed by [[Bungie Studios]],<ref>{{Cite web | year = 2006 | url = http://www.bungie.net/News/Story.aspx?cid=9326 | title = Halo Base interviews speedrun champion Cody Miller | publisher = Bungie | author = “KPaul” | accessmonthday = December 28 | accessyear = 2006}}</ref> the developers of the ''[[Halo (video game series)|Halo]]'' series, and was picked up by several major news sites, including [[CNET]],<ref>{{Cite web | year = 2006 | url = http://news.cnet.co.uk/gamesgear/0,39029682,49282914,00.htm | title = Guinness recognises l33t 'Halo 2' player | publisher = CNET | author = Surette, T. | accessmonthday = December 28 | accessyear = 2006}}</ref> [[GameSpot]],<ref>{{Cite web | year = 2006 | url = http://www.gamespot.com/xbox/action/halo2/news.html?sid=6155963 | title = Guinness recognizes record-setting Halo player | publisher = GameSpot | author = Surette, T. | accessmonthday = December 28 | accessyear = 2006}}</ref> [[Joystiq]],<ref>{{Cite web | year = 2006 | url = http://www.joystiq.com/2006/08/16/halo-2-feat-becomes-guinness-world-record/ | title = Halo 2 speed trial becomes Guinness world record | publisher = Joystiq | author = Miller, R. | accessmonthday = December 28 | accessyear = 2006}}</ref> and [[Yahoo!]].<ref>{{Cite web | year = 2006 | url = http://videogames.yahoo.com/newsarticle?eid=476630&page=0 | title = Guinness recognizes record-setting Halo player | publisher = Yahoo! | author = Surette, T. | accessmonthday = December 28 | accessyear = 2006}}</ref>

== Glossary ==
In the context of speedrunning, many common terms, usually [[neologism]]s, have been created. These terms are necessary to understand most general discussions about the phenomenon. This list covers the most ubiquitous terminology. Note that some words may have a different typical meaning outside of the lexicon of speedrunning; for example, [[Key frame|frame]] applies to movies as well as to video games, but only the latter has relevance in this case. Also, there are more specific terms in the context of [[tool-assisted speedrun]]ning which can be found in its corresponding article and paragraph (see [[Tool-assisted speedrun#Glossary|section “Glossary” in ''Tool-assisted speedrun'']]).
;[[Key frame|Frame]]
:One of the still images composing the animation of a video game. Most gaming systems update the screen (approximately) 50 ([[PAL]]) or 60 ([[NTSC]]) times per second.<ref name="FPSRate">With the PAL and NTSC standards in mind, screen update rates of respectively 50 and 59.94 times per second would be the most compatible choices (twice the standard rates of respectively 25 and 29.97 times per second). However, for various reasons, consoles may refresh the screen at non-standard rates. The hardware of the [[Nintendo Entertainment System]], for example, causes an update rate of slightly above the standard: about 50.006978 in PAL regions and about 60.098814 in NTSC regions.</ref> Every one of such updates is called a frame — even if only every second or third frame is rendered, as seen on some systems, notwithstanding [[lag]] (see below). Almost all console systems check the input (which buttons are pressed on the controller) once per frame, which is therefore the highest possible resolution of input.<ref name="ResolutionOfInput">{{Cite web | year = 2006 | url = http://tasvideos.org/Glossary.html | title = Glossary | publisher = TASVideos | author = TASVideos contributors | accessmonthday = December 28 | accessyear = 2006}}</ref> For example, if firing a weapon by means of pressing a button (or otherwise providing one particular type of input) costs one frame of input in a game that runs at 60 frames per second, it is possible to fire that weapon 30 times per second. (Per the [[Nyquist–Shannon sampling theorem]], at least one frame of not giving any input is required after each pressing of the button to prevent the system from seeing the input as one long depressed state as opposed to many individual depressions. If two buttons can be used to perform the same action, they may be used subsequently to perform the action without pausing.)<ref name="NyquistShannon">The [[Nyquist–Shannon sampling theorem]] states that for a periodic phenomenon's period to be measured, the sampling rate must be at least twice the period. In this context, the period is how long it takes a button to go from pressed to non-pressed and back, and the sampling rate is how often the game checks the button state. Most games check the state of a button 50 or 60 times per second ([[PAL]] and [[NTSC]] systems, respectively), while it is not necessarily parallel to the rate at which the screen is updated (''[[The Legend of Zelda: Ocarina of Time]]'', for example, checks the input 60 times per second on an NTSC [[Nintendo 64]] console, while the screen is usually updated only 20 times per second). Therefore, if a button is down for {{fraction|1|60}} second and then up for {{fraction|1|60}} second, the game will only register 30 actual down states, as a faster rate than {{fraction|1|60}} is not registered (as such, one cannot simply double the speed of input, as then the game would register either only down states or up states, which it would not consider separate). This theory does not apply to actions that are performed while a button is held down. Is should also be noted that a “button” refers to any valid method of input, not restricted to a controller, and that this theory goes for every state the input method may allow for.</ref> Maximum input is usually only performed by tool-assisted speedrunners.
;[[Glitch]]
:An unintentional feature in a game ― usually considered erroneous. Many games contain glitches, some very small and hardly notable, but others very significant. Glitches are the result of sloppy programming, whether accidental or intentional. Because many console games are ran on rather slow machines, there is usually a limited environment for performing calculations. “Perfect” programming (such as pixel-perfect collision checks) would often be too slow to be practical. As a result, programming “shortcuts” have to be taken for some routines (such as checking whether a character is entering an impassable area, and other ubiquitous or otherwise often executed code) in order to ensure that the hardware would have sufficient processing power to execute it. Glitches are used (or, arguably, “abused”) by speedrunners in order to progress through the game faster, skip parts of the game, or change the course of the gameplay altogether. See [[Speedrun#Glitches|section “Glitches”]] for further information.
;[[Lag]]
:The effect experienced when the game runs slower than normal due to there being too many instructions for the CPU to calculate in the time of one frame. Thus, the CPU will spread the calculations over multiple frames. Because it cannot show the results of the calculations when expected, there will be identically rendered frames while it is working. Often, during lag, the game will ignore the player's input until the calculations are performed. There might also appear graphical anomalies, such as [[head-up display]]s appearing in the wrong place. Note that lag often refers to delays experienced in computing communications, such as during [[Multiplayer game|online gaming]]; this particular definition is of little relevance to speedrunning as very few speedruns are played by multiple people simultaneously via an internet connection.
;Low-percentage, low%, minimalist
:Type of speedrun in which the fastest time is attempted while collecting only the bare minimum amount of items, [[power-up]]s or abilities required for completion. These runs are slower than their “any%” counterparts due to the extra time spent killing enemies while having lesser in-game abilities or actively avoiding items.<ref name="MinimalistTerm"/> Speedruns of the ''[[Metroid]]'' series are particularly good examples, as the open nature of the games, coupled with the ability to use programming errors, allows for extensive route planning to yield very low completion opportunities.
;Maximum, 100%
:Type of speedrun in which as much of the game is played as possible, such as killing all enemies in the game or collecting every [[item]] available. These runs are slower than their “any%” counterparts due to the taking of actions and going to places in the game which are not necessary for the game's completion.
;Any%
:Speedrun which involves the player aiming to complete the game as quickly as possible, skipping as much of the game as needed (notwithstanding tiers).<ref name="MinimalistTerm"/> This is the original, conventional, and most ubiquitous type of run.
;Multi-segment
:A speedrun performed in multiple play sessions (or “segments”). In formal descriptions, such runs are usually accompanied by the number of segments, such as “in ten segments”. Segmented speedruns are done by defining what a game's divisions are in order to run them separately, in multiple sessions (usually separated by save points). This allows for a higher level of perfection because the entire game does not need to be run all at once; runners can redo small parts of a game as many times as they need to until they are satisfied with the result; it's for this reason that segmented speedruns are exclusively faster than their single-segment counterparts. It is normal, however, that the individual parts are done in order of appearance in the game, since the actions taken in one segment would affect later segments; such as the weapons that one obtains in a [[first-person shooter]] or the experience points that one attains in a [[role-playing game]].
;Run
:A short and informal term for speedrun. It is often used instead of the term “speedrun” on online discussion forums. Similarly, [[tool-assisted speedrun]]s are commonly abbreviated TAS (see [[Tool-assisted speedrun#Glossary|section “Glossary” in ''Tool-assisted speedrun'']]).
;Single-segment
:A speedrun performed in one continuous play session. Single-segment speedruns are often, if not always, slower than multi-segment speedruns, due to the fact a runner does not have the ability to stop the game periodically to redo (and thus optimize) parts that he has already played.
;[[Tier]]
:A particular intention or set of rules with which to record a speedrun, such as playing with different characters or taking a certain route. For example, if a route is found that allows extremely fast completion of a game via a glitch, it will often be considered a separate “tier” in order to preserve the old route's movies and records, as people may find the old way of doing it to be more enjoyable or otherwise interesting.
;[[Tool-assisted speedrun]], TAS
:A tool-assisted speedrun (commonly abbreviated TAS) is a speedrun movie produced with the use of tools such as [[slow motion]] and [[re-recording (video gaming)|re-recording]]. The basic premise of these runs is that a “tool” (such as an emulator that provides the author with features that are unavailable in regular playing) is used in order to overcome human limitations such as [[skill]] and [[reflex]].<ref name="WhyAndHow"/>
;Unassisted, regular
:An explicit indicator that this speedrun is not [[tool-assisted speedrun|tool-assisted]]. The term “speedrun” alone, without either “tool-assisted” or “unassisted” accompanying it, is expected to be unassisted. It is thus mostly used in order to highlight the differences between unassisted and tool-assisted speedruns.

== Media ==
[[Image:Megaman v8.png|thumb|right|Screenshot of the [[Mega Man Classic|Mega Man]] tool-assisted speedrun, excerpted below.]]
This article includes several digital videos to help describe the speedrunning phenomenon by giving clear, real-world examples, mostly excerpted from representative speedruns. These files have a video steam [[codec|encoded]] in [[Theora]] and an audio stream encoded in [[Vorbis]]. Due to the open nature of these codecs, there is a wide variety of software available for the decoding of these files, allowing them to play back on almost every [[personal computer]]. For more information, please see ''[[Wikipedia:Media help|Media help]]'', or refer to the documentation of either codec or your operating system.
{{Multi-video start}}
{{Multi-video item |
  filename      = quake_e4m3route.ogg |
  title         = Development of Quake route planning |
  description   = The progression of the route used to run the E4M3 [http://speeddemosarchive.com/quake/mkt.pl?level:e4m3] (''The Elder God Shrine'')<ref name="LevelNames"/> segment in the [[Quake done Quick]] videos is shown in this video. The earliest recorded performance of this level was done in June 1997 by Yonatan Donner.<ref name="QuakeDoneQuick"/> His attempt was very lengthy and its route involved many things that are now proven to be unnecessary; almost entirely due to the discovery of tricks and techniques that were unknown at that time. This version is shown at the beginning of the movie, after which the subsequent improvements made by “DooMfienD”, Markus Taipale, and Peter Horvath, who made the last revision (see [[Speedrun#Quake|section “Quake”]] for a screenshot). A description of the history of and events performed in these runs can be found in the [[Speedrun#Route planning|“Route planning”]] section. (13.1 [[Megabyte|MB]], [[ogg]]/[[Theora]] format.) |
  format        = [[Theora]]
}}
{{Multi-video item |
  filename      = sm641947_seqbreaking.ogg |
  title         = Sequence breaking in Super Mario 64 |
  description   = A video depicting sequence breaking in the game [[Super Mario 64]], excerpted from the “16-star” speedrun of this game in 0:19:47 by Eddie “kirbykarter” Taylor.[http://speeddemosarchive.com/Mario64.html] The runner uses [[MIPS (character)|MIPS]], the armless yellow rabbit that appears in the basement of Peach's Castle, to abuse a glitch that causes him to walk through a wall. This allows the runner to skip a total of 54 stars and save around 50 minutes of time, as the game can be completed after collecting a mere 16 stars — without this glitch, it is required that the player collects a minimum of 70 stars to finish. (4.02 [[Megabyte|MB]], [[ogg]]/[[Theora]] format.) |
  format        = [[Theora]]
}}
{{Multi-video item |
  filename      = megaman1610_fireman.ogg |
  title         = Glitches in Mega Man tool-assisted speedrunning |
  description   = Depicted in this video is technically profound glitch usage in the tool-assisted speedrun of [[Mega Man Classic|Mega Man]] by Joel “Bisqwit” Yliluoma and Yashar “AngerFist” Nasirian, in which the game is finished in 0:16:10.[http://bisqwit.iki.fi/nesvideos/movies.cgi?id=515] Due to the utilization (or “abuse”) of a large amount of glitches, the runners are able to recurrently perform almost impractically difficult tricks which make fast movement through walls, floors and ceilings possible.<ref name="MegaMan1610SubmissionCommentary">{{Cite web | year = 2006 | url = http://tasvideos.org/1032S.html | title = Submission #1032: Bisqwit & AngerFist's NES Mega Man in 16:10.82 | publisher = TASVideos | author = Yliluoma, J. | accessmonthday = January 01 | accessyear = 2007}}</ref> See [[Speedrun#Glitches|section “Glitches”]] for an explanation of some of the techniques that are performed in this movie. (5.08 [[Megabyte|MB]], [[ogg]]/[[Theora]] format.) |
  format        = [[Theora]]
}}
{{Multi-video end}}

== References ==
In the writing and research of this article, a variety of online publications have been used as source.

Due to the nature of the subject matter, usage of what would otherwise be considered inaccurate sources is inevitable. It is common for many online communities to use collaborative content management systems and discussion boards to convey their news and information; such sources have been used mainly in order to refer to recordkeeping databases and treatises that directly concern the sites in question. It is rebuttably presumed that in such cases, accuracy is proven by the certainty that people who have been cited in such instances are who they claim to be.

===== Journal, newspaper and magazine articles =====
*{{Cite web | year = 2005 | url = http://www.1up.com/do/feature?cId=3142599&did=1 | title = Smashing the Clock | publisher = 1UP.com | author = Turner, B. | accessmonthday = August 13 | accessyear = 2005}}
*{{Cite web | year = 2004 | url = http://www.playphoria.com/features/interview/sequencebreakers/ | title = Beating them at their own game | publisher = Gamingredients | author = Choudhury, R. | accessmonthday = October 2 | accessyear = 2004 | archivedate=2007-02-14 | archiveurl=http://web.archive.org/web/20070214070218/http://www.playphoria.com/features/interview/sequencebreakers/}}
*{{Cite web | year = 2006 | url = http://www.mtv.com/news/articles/1528811/20060417/index.jhtml | title = Gamers Divided Over Freakish Feats Achieved With Tool-Assisted Speed Runs | publisher = MTV News | author = Totilo, S. | accessmonthday = April 29 | accessyear = 2006}}
*{{Cite web | year = 2005 | url = http://www.mtv.com/news/articles/1504116/06142005/id_0.jhtml | title = For Some Gamers, Merely Finishing A Game Isn't Enough | publisher = MTV News | author = Totilo, S. | accessmonthday = April 29 | accessyear = 2006}}
*{{Cite web | year = 2004 | url = http://games.slashdot.org/article.pl?sid=04/04/24/2130200 | title = 'Perfect' Zelda NES Speed Record Beaten | publisher = Slashdot | author = Slashdot contributors | accessmonthday = May 25 | accessyear = 2006}}
*{{Cite web | year = 2005 | url = http://bisqwit.iki.fi/nesvideos/Interviews/Phil/GEE2005.html | title = Interview of Phil for September 2005 issue of GEE | publisher = TASVideos | author = Grohé, M., Coté, P. | accessmonthday = May 25 | accessyear = 2006}}
*{{Cite web | year = 2005 | url = http://bisqwit.iki.fi/nesvideos/Interviews/Bisqwit/GEE2005.html | title = Interview of Bisqwit for September 2005 issue of GEE | publisher = TASVideos | author = Grohé, M., Yliluoma, J. | accessmonthday = May 25 | accessyear = 2006}}
*{{Cite web | year = 2005 | url = http://tasvideos.org/Interviews/Bisqwit/GameCritics2004.html | title = Interview of Bisqwit for GameCritics | publisher = TASVideos | author = Orland K., Yliluoma, J. | accessmonthday = May 25 | accessyear = 2006}}
*{{Cite web | year = 2003 | url = http://games.slashdot.org/article.pl?sid=03/05/06/0521240 | title = Metroid Prime Done Quick | publisher = Slashdot | author = “Xs”, Slashdot contributors | accessmonthday = May 25 | accessyear = 2006}}
*{{Cite web | year = 2003 | url = http://games.slashdot.org/article.pl?sid=03/11/10/0655226 | title = Metroid Prime Done Even Quicker | publisher = Slashdot | author = Slashdot contributors | accessmonthday = May 25 | accessyear = 2006}}

===== General informative sources =====
*{{Cite web | year = 2004 | url = http://speeddemosarchive.com/quake/history.txt | title = History of Quake speed-running | publisher = Speed Demos Archive | author = Pflug, N. | accessmonthday = October 16 | accessyear = 2005}}
*{{Cite web | year = 2003 | url = http://www.doomworld.com/10years/demos/demos01.php | title = A Brief DOOM Demo History | publisher = Doomworld | author = Merrill, D. | accessmonthday = October 16 | accessyear = 2005}}
*{{Cite web | year = 2005 | url = http://www.samus.co.uk/metroid/sequence_breaking.shtml | title = Metroid Sequence Breaking | publisher = Samus.co.uk | author = Mills, A. | accessmonthday = December 21 | accessyear = 2004}}
*{{Cite web | year = 2006 | url = http://bisqwit.iki.fi/nesvideos/CommonTricks.html | title = Common Tricks | publisher = TASVideos | author = TASVideos contributors | accessmonthday = October 16 | accessyear = 2005}}

== Footnotes ==
<!-- Please see [[Wikipedia:References]] for an elaborate guide on how to add references to this section. -->
<div class="references-small">
<references />
</div>

== See also ==
===== Related articles =====
*[[Tool-assisted speedrun]] — a speedrun in which one uses tools such as slow motion and re-recording.
*[[Notable games for speedrunning]] — an extensively documented list of noteworthy games for speedrunning purposes.
*[[Time attack]] — a mode which allows the player to finish a game (or a part of it) as fast as possible, saving record times.
*[[High score|Score attack]] — the attempt to reach a record logged point value in a game.
*[[Sequence breaking]] — the act of performing actions or obtaining items in a video game out of the intended order, or of skipping said actions or items entirely while still successfully completing the game.
*[[Electronic sports]] — a general term used to describe computer and video games which are played as competitive sports.
*[[Speed Demos Archive]] — the largest speedrunning community on the Internet.
*[[Parkour]]/[[Free Running]] — a real-world urban activity similar in philosophy to speedrunning.

===== Other information =====
{{wiktionary-inline|speedrun}}

== External links ==
These external resources are generally Web links that lead to sites that specialize in speedrunning, and are often hosted by knowledgeable and well-respected speedrunners. They are therefore very reliable and good locations for further research on the subject. Among the listed sites are also communities that have been created so that players of video games may compete against each other for fast times and high scores. For reasons of practicality, sites which only give a brief description or passing remark about speedruns, of which there are many, are not included. 

===== General speed/score attack sites =====
*[http://speedrunwiki.com/Main_Page Speedrun wiki] - A [[wiki]] about speedruns.
*[http://speeddemosarchive.com/ Speed Demos Archive] - The largest repository and community of speedrunning
*[http://tasvideos.org/ TASVideos] - Speedruns through various [[Nintendo Entertainment System|NES/Famicom]], [[Super Nintendo Entertainment System|Super NES/SFC]], [[Sega Mega Drive/Sega Genesis|Mega Drive/Genesis]], [[Game Boy]]/[[Game Boy Advance]], and [[Nintendo 64]] games, made with emulation and by slowing down the gameplay
*[http://www.archive.org/details/speed_runs Collection of speedrun videos] at the [[Internet Archive]]
*[http://homepage3.nifty.com/shin3/ わいわい芸夢館] - Japanese collection of speedruns {{ja icon}}
*[http://www.twingalaxies.com/ Twin Galaxies] - The closest thing to an official video game world record authority
*[http://www.super-play.co.uk/ SuperPlay] - High-score and speed runs, mainly of [[Shoot 'em ups]]
*[http://www.adventure-speedruns.com/ Adventure-Speedruns] - Nostalgic Pure - Lucas Arts & Co

One may find various speedruns also available on sites that specialize in [[video sharing]], such as [[YouTube]] or [[Google Video]].

===== Game-specific sites =====
*[http://www.doom2.net/compet-n/index.cgi COMPET-N] - ''[[Doom]]'' series (excluding ''[[Doom 3]]'')
*[http://www.metroid2002.com/ Metroid 2002] - ''[[Metroid]]'' series
*[http://www.planetquake.com/qdq/ Quake done Quick] - Home of the famous ''Quake'' collaborative speedruns, including the “Nightmare” difficulty run in 12:23
*[http://speeddemosarchive.com/quake/ Speed Demos Archive - Quake] - Individual level runs of ''Quake'', including runs on hundreds of home-made maps
*[http://hl2dq.net Half-Life 2: Done Quick] - ''[[Half-Life 2]]'' speedrunning forum
*[http://highspeedhalo.net High Speed Halo] - ''[[Halo %28series%29]]''

[[Category:Video game gameplay]]
[[Category:Competitive video gaming]]

[[de:Speedrun]]
[[fr:Speedrun]]
[[nl:Speedrun]]
[[ja:やり込み]]
[[pt:Quebra de Seqüência]]
[[fi:Speedrun]]