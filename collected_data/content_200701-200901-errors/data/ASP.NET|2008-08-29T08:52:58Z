{{Citations missing|date=January 2008}}
[[Image:ASPNETlogo.gif|250px|right|thumb|ASP.NET logo]]
'''ASP.NET''' is a [[web application framework]] developed and marketed by [[Microsoft]], that [[programmer]]s can use to build dynamic [[web site]]s, [[web application]]s and [[web service]]s. It was first released in January 2002 with version 1.0 of the [[.NET Framework]], and is the successor to Microsoft's [[Active Server Pages]] (ASP) technology. ASP.NET is built on the [[Common Language Runtime]] (CLR), allowing programmers to write ASP.NET code using any supported [[.NET Languages|.NET language]].

== History ==

After the release of [[Internet Information Services]] 4.0 in 1997, Microsoft began researching possibilities for a new web application model that would solve common complaints about Active Server Pages, especially with regard to [[separation of presentation and content]] and being able to write "clean" code.<ref name="architecturejournal">{{cite web
| url=http://msdn2.microsoft.com/en-us/library/bb266332.aspx
| title=Architecture Journal Profile: Scott Guthrie
| date=January 2007
| accessdate=2008-04-20
| work=The Architecture Journal
| publisher=[[Microsoft]]
}}</ref> Mark Anders, a manager on the IIS team, and [[Scott Guthrie]], who had joined Microsoft in 1997 after graduating from [[Duke University]], were tasked with determining what that model would look like.  The initial design was developed over the course of two months by Anders and Guthrie, and Guthrie coded the initial prototypes during the Christmas holidays in 1997.<ref name="otegem">{{cite web
| url=http://www.vanotegem.nl/PermaLink,guid,d9826145-408c-4fb9-8939-79d7e6a19218.aspx
| title=Interview with Scott Guthrie, creator of ASP.NET
| author=Michiel van Otegem
| date=[[July 24]] [[2007]]
| accessdate=2008-04-20
}}</ref> 
[[Image:MIX Keynote-Scott Guthrie 09 MS 05 2007.jpg|left|thumb|portrait|[[Scott Guthrie]] in 2007.]]
The initial prototype was called "XSP"; Guthrie explained in a 2007 interview that, "''People would always ask what the X stood for. At the time it really didn't stand for anything. XML started with that; XSLT started with that. Everything cool seemed to start with an X, so that's what we originally named it.''"<ref name="architecturejournal" />  The initial development of XSP was done using [[Java (programming language)|Java]],<ref name="anderselreg">{{cite web
| url=http://www.regdeveloper.co.uk/2007/10/30/asp_net_java_project_cool/
| title=How ASP.NET began in Java
| author=Tim Anderson
| date=[[October 30]] [[2007]]
| accessdate=2008-04-20
| publisher=[[The Register]]
}}</ref> but it was soon decided to build the new platform on top of the [[Common Language Runtime]] (CLR) instead.  Guthrie described this decision as a "huge risk", as the success of their new web development platform would be tied to the success of the CLR, which, like XSP, was still in the early stages of development, so much so that the XSP team was the first team at Microsoft to target the CLR.

With the move to the Common Language Runtime, XSP was re-implemented in [[C Sharp (programming language)|C#]] (known internally as "Project Cool" but kept secret from the public), and renamed to ASP+, as by this point the new platform was seen as being the successor to Active Server Pages, and the intention was to provide an easy migration path for ASP developers.<ref name="msdnshow9">{{cite web
| url=http://msdn.microsoft.com/archive/default.asp?url=/archive/en-us/theshow/Episode009/default.asp
| title=Show #9 - ASP.NET
| date=[[December 20]] [[2000]]
| accessdate=2008-04-20
| work=The MSDN Show
| publisher=[[Microsoft]]
}}</ref> 

Mark Anders first demonstrated ASP+ at the ASP Connections conference in [[Phoenix, Arizona]] on [[May 2]] [[2000]]. Demonstrations to the wide public and initial beta release of ASP+ (and the rest of the .NET Framework) came at the 2000 [[Professional Developers Conference]] on [[July 11]] [[2000]] in [[Orlando, Florida]]. During [[Bill Gates]]'s keynote presentation, [[Fujitsu]] demonstrated ASP+ being used in conjunction with [[COBOL]],<ref>{{cite web
| url = http://www.microsoft.com/presspass/exec/billg/speeches/2000/07-12pdc.aspx
| title = Bill Gates speech transcript - Professional Developers Conference 2000
| date = [[July 11]] [[2000]]
| accessdate = 2008-04-20
| publisher = [[Microsoft]]
}}</ref> and support for a variety of other languages was announced, including Microsoft's new [[Visual Basic .NET]] and C# languages, as well as [[Python (programming language)|Python]] and [[Perl]] support by way of interoperability tools created by [[ActiveState]].<ref>{{cite web
| url = http://findarticles.com/p/articles/mi_m0EIN/is_2000_July_11/ai_63287204
| title = ActiveState Supports Microsoft .NET Framework; Perl .NET & Python .NET Cross-Language Interoperability
| date = [[July 11]] [[2000]]
| accessdate=2008-04-20
| publisher = Business Wire
}}</ref>

Once the ".NET" branding was decided on in the second half of 2000, it was decided to rename ASP+ to ASP.NET.  Mark Anders explained on an appearance on ''The MSDN Show'' that year that, "''The .NET initiative is really about a number of factors, itâ€™s about delivering software as a service, it's about XML and web services and really enhancing the Internet in terms of what it can do .... we really wanted to bring its name more in line with the rest of the platform pieces that make up the .NET framework.''"<ref name="msdnshow9"/>

After four years of development, and a series of beta releases in 2000 and 2001, ASP.NET 1.0 was released on [[January 5]] [[2002]] as part of version 1.0 of the [[.NET Framework]].  Even prior to the release, dozens of books had been written about ASP.NET,<ref>{{cite web
| url=http://msdn.microsoft.com/library/shared/deeptree/asp/rightframe.asp?dtcfg=/archive/deeptreeconfig.xml&url=/archive/en-us/theshow/Episode019/default.asp
| title=Show #19 - LIVE! from the PDC
| date=[[November 15]] [[2001]]
| accessdate=2008-04-20
| work=The MSDN Show
| publisher=[[Microsoft]]
}}</ref> and Microsoft promoted it heavily as part of their platform for web services.  Guthrie became the product unit manager for ASP.NET, and development continued apace, with version 1.1 being released on [[April 24]] [[2003]] as a part of [[Windows Server 2003]].  This release focused on improving ASP.NET's support for mobile devices.

{{Clr}}

== Characteristics ==

=== Pages === 

ASP.NET pages, known officially as "web forms", are the main building block for application development.<ref name="macdonald63">{{harv|MacDonald|Szpuszta|2005|p=63}}</ref>  Web forms are contained in files with an '''ASPX''' extension; in programming jargon, these files typically contain static ([[XHTML|X]])[[HTML]] markup, as well as markup defining server-side Web Controls and User Controls where the developers place all the required static and dynamic content for the web page.  Additionally, dynamic code which runs on the server can be placed in a page within a block '''<code><nowiki><% -- dynamic code -- %></nowiki></code>''' which is similar to other web development technologies such as [[PHP]], [[JavaServer Pages|JSP]], and [[Active Server Pages|ASP]], but this practice is generally discouraged except for the purposes of [[Binding (computer science)|data binding]] since it requires more calls when rendering the page.

Note that this sample uses code "inline", as opposed to code behind.

<source lang="asp">
<%@ Page Language="C#" %>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<script runat="server">

    protected void Page_Load(object sender, EventArgs e)
    {
        Label1.Text = DateTime.Now.ToLongDateString();
    }

</script>

<html xmlns="http://www.w3.org/1999/xhtml">
<head runat="server">
    <title>Sample page</title>
</head>
<body>
    <form id="form1" runat="server">
    <div>
         <form method="post" action="">
      <fieldset>
        <legend>Contact Form</legend>
        <label for="name">name: </label>
        <input type="text" id="nome" name="nome" /><br />
        <label for="surname">surname: </label>
        <input type="text" id="cognome" name="cognome" /><br />
        <label for="email">email: </label>
        <input type="text" id="email" name="email" /><br />
        <label for="password">password: </label>
        <input type="password" id="password" name="password" /><br />
        <label for="message">message: </label>
        <textarea id="message" name="message" rows="8" cols="20"></textarea><br />
        <input type="submit" id="go" value="send" />
     </fieldset>
    </form>
        <asp:Label runat="server" id="Label1" />
    </div>
    </form>

</body>
</html>
</source>

=== Code-behind model ===

It is recommended by Microsoft for dealing with dynamic program code to use the code-behind model, which places this code in a separate file or in a specially designated script tag.  Code-behind files typically have names like ''MyPage.aspx.cs'' or ''MyPage.aspx.vb'' based on the ASPX file name (this practice is automatic in [[Microsoft Visual Studio]] and other [[Integrated development environment|IDEs]]).  When using this style of programming, the developer writes code to respond to different events, like the page being loaded, or a control being clicked, rather than a procedural walk through the document.

ASP.NET's code-behind model marks a departure from Classic ASP in that it encourages developers to build applications with [[separation of presentation and content]] in mind.  In theory, this would allow a web designer, for example, to focus on the design markup with less potential for disturbing the programming code that drives it.  This is similar to the separation of the controller from the view in [[model-view-controller]] frameworks.

==== Example ====

<source lang="asp">
<%@ Page Language="C#" CodeFile="SampleCodeBehind.aspx.cs" Inherits="Website.SampleCodeBehind" 
AutoEventWireup="true" %>
</source>

The above tag is placed at the beginning of the ASPX file. The ''CodeFile'' property of the ''@ Page'' directive specifies the file (.cs or .vb) acting as the code-behind while the ''Inherits'' property specifies the Class the Page derives from.  In this example, the  ''@ Page'' directive is included in SamplePage.aspx, then SampleCodeBehind.aspx.cs acts as the code-behind for this page:

<source lang="csharp">
using System;

namespace Website
{
	public partial class SampleCodeBehind : System.Web.UI.Page
	{
		protected override void Page_Load(EventArgs e)
		{
			base.OnLoad(e);
		}
	}
}
</source>

In this case, the Page_Load() method is called every time the ASPX page is requested.  The programmer can implement event handlers at several stages of the page execution process to perform processing.

=== User controls ===

ASP.NET supports creating reusable components through the creation of User Controls. A User Control follows the same structure as a Web Form, except that such controls are derived from the <code>System.Web.UI.UserControl</code> class, and are stored in '''ASCX''' files. Like ASPX files, a ASCX contains static [[HTML]] or [[XHTML]] markup, as well as markup defining web control and other User Controls. The code-behind model can be used.

Programmers can add their own properties, methods,<ref>http://msdn2.microsoft.com/en-us/library/ms972975.aspx#usercontrols_topic6 Adding Properties and Methods to a User Control
</ref> and event handlers.<ref>http://msdn2.microsoft.com/en-us/library/ms972975.aspx#usercontrols_topic9 Creating and Raising a Custom Event</ref>  An event bubbling mechanism provides the ability to pass an event fired by a user control up to its containing page.

=== Rendering technique ===

ASP.NET uses a ''visited composites'' rendering technique. During compilation, the template (.aspx) file is compiled into initialization code which builds a control tree (the composite) representing the original template. Literal text goes into instances of the Literal control class, and server controls are represented by instances of a specific control class. The initialization code is combined with user-written code (usually by the assembly of multiple partial classes) and results in a class specific for the page. The page doubles as the root of the '''control tree'''.

Actual requests for the page are processed through a number of steps. First, during the initialization steps, an instance of the page class is created and the initialization code is executed. This produces the initial control tree which is now typically manipulated by the methods of the page in the following steps. As each node in the tree is a control represented as an instance of a class, the code may change the tree structure as well as manipulate the properties/methods of the individual nodes. Finally, during the rendering step a visitor is used to visit every node in the tree, asking each node to render itself using the methods of the visitor. The resulting HTML output is sent to the client.

After the request has been processed, the instance of the page class is discarded and with it the entire control tree.

=== State management ===

ASP.NET applications are hosted in a [[web server]] and are accessed over the [[Stateless_server|stateless]] [[HTTP]] protocol. As such, if the application uses stateful interaction, it has to implement [[state management]] on its own. ASP.NET provides various functionality for state management in ASP.NET applications.

==== Application state ====

Application state is a collection of user-defined variables that are shared by all invocations of an ASP.NET application. These are set and initialized when the <code>Application_OnStart</code> event fires on the loading of the first instance of the applications and are available till the last instance exits. Application state variables are accessed using the <code>Applications</code> collection, which provides a wrapper for the application state variables. Application state variables are identified by names.<ref name="state"/>

==== Session state ====

Session state is a collection of user-defined session variables, which are persisted during a user session. These variables are unique to different instances of a user session, and are accessed using the <code>Session</code> collection. Session variables can be set to be automatically destroyed after a defined time of inactivity, even if the session does not end. At the client end, a user session is identified either by a [[HTTP cookie|cookie]] or by encoding the session ID in the URL itself.<ref name="state">{{cite web | url = http://support.microsoft.com/kb/307598 | title = INFO: ASP.NET State Management Overview | accessdate = 2007-10-23}}</ref>

ASP.NET supports three modes of persistence for session variables:<ref name="state"/>
; In Process Mode: The session variables are maintained within the ASP.NET [[process (computing)|process]]. This is the fastest way, however, in this mode the variables are destroyed when the ASP.NET process is recycled or shut down. Since the application is recycled from time to time this mode is not recommended for critical applications.
; ASPState Mode: In this mode, ASP.NET runs a separate [[Windows service]] that maintains the state variables. Because the state management happens outside the ASP.NET process, this has a negative impact on performance, but it allows multiple ASP.NET instances to share the same state server, thus allowing an ASP.NET application to be load-balanced and scaled out on multiple servers. Also, since the state management service runs independent of ASP.NET, variables can persist across ASP.NET process shutdowns.
; SqlServer Mode: In this mode, the state variables are stored in a [[database server]], accessible using [[SQL]].Session variables can be persisted across ASP.NET process shutdowns in this mode as well. The main advantage of this mode is it would allow the application to balance load on a server cluster while sharing sessions between servers.

==== View state ====

View state refers to the page-level state management mechanism, which is utilized by the HTML pages emitted by ASP.NET applications to maintain the state of the web form controls and [[GUI widget|widgets]].The state of the controls are encoded and sent to the server at every form submission in a hidden field known as <code>__VIEWSTATE</code>. The server sends back the variable so that when the page is re-rendered, the controls render at their last state. At the server side, the application might change the viewstate, if the processing results in updating the state of any control. The states of individual controls are decoded at the server, and are available for use in ASP.NET pages using the <code>ViewState</code> collection.<ref>{{cite web | url = http://www.extremeexperts.com/Net/Articles/ViewState.aspx | title =  ViewState in ASP.NET | accessdate = 2007-10-23}}</ref>
<ref>{{cite web | url = http://www.dotnetrobert.com/dotnet/Home/tabid/37/Default.aspx| title =  ASP.Net ViewState Overview}}</ref>

=== Template engine ===

When first released, ASP.NET lacked a [[template engine]].  Because the [[.NET framework]] is [[object oriented|object-oriented]] and allows for [[Inheritance (computer science)|inheritance]], many developers would define a new base class that inherits from "System.Web.UI.Page", write [[Method (computer science)|method]]s here that render HTML, and then make the pages in their application inherit from this new class.  While this allows for common elements to be reused across a site, it adds complexity and mixes [[source code]] with [[markup]].  Furthermore, this method can only be visually tested by running the application - not while designing it.  Other developers have used [[Header file|include files]] and other tricks to avoid having to implement the same navigation and other elements in every page.

ASP.NET 2.0 introduced the concept of "master pages", which allow for [[Web template|template]]-based page development.  A web application can have one or more master pages, which can be nested.<ref>[http://msdn2.microsoft.com/en-us/library/wtxbf3hh.aspx ASP.NET Master Pages Overview (Microsoft Developer Network)]</ref> Master templates have place-holder controls, called ''ContentPlaceHolders'' to denote where the dynamic content goes, as well as [[HTML]] and [[JavaScript]] shared across child pages.

Child pages use those ContentPlaceHolder controls, which must be mapped to the place-holder of the master page that the content page is populating. The rest of the page is defined by the shared parts of the master page, much like a [[mail merge]] in a [[word processor]]. All markup and [[server (computing)|server]] controls in the content page must be placed within the ContentPlaceHolder control.

When a request is made for a content page, ASP.NET merges the output of the content page with the output of the master page, and sends the output to the user.

The master page remains fully accessible to the content page. This means that the content page may still manipulate headers, change title, configure caching etc. If the master page exposes public properties or methods (e.g. for setting copyright notices) the content page can use these as well.

=== Other files ===

Other file extensions associated with different versions of ASP.NET include:

{| class="wikitable"
|-
! Extension !! Required version !! Description
|-
| asax || 1.0 || [[Global.asax]], used for application-level logic <ref>[http://msdn2.microsoft.com/en-us/library/2027ewzw.aspx Global.asax Syntax<!-- Bot generated title -->]</ref>
|-
| ascx || 1.0 || Web UserControls:  custom [[Widget (computing)|controls]] to be placed onto web pages.
|-
| ashx || 1.0 || custom [[HTTP]] handlers.
|-
| asmx || 1.0 || [[web service]] pages.
|-
| axd || 1.0 || when enabled in web.config requesting trace.axd outputs application-level tracing. Also used for the special webresource.axd handler which allows control/component developers to package a component/control complete with images, script, css etc. for deployment in a single file (an 'assembly')
|-
| browser || 2.0 || browser capabilities files stored in [[XML]] format; introduced in version 2.0. ASP.NET 2 includes many of these by default, to support common web browsers. These specify which browsers have which capabilities, so that ASP.NET 2 can automatically customize and optimize its output accordingly. Special .browser files are available for free download to handle, for instance, the W3C Validator, so that it properly shows standards-compliant pages as being standards-compliant. Replaces the harder-to-use BrowserCaps section that was in machine.config and could be overridden in [[web.config]] in ASP.NET 1.x.
|-
| config || 1.0 || [[web.config]] is the only file in a specific Web application to use this extension by default (machine.config similarly affects the entire Web server and all applications on it), however ASP.NET provides facilities to create and consume other config files.  These are stored in [[XML]] format.
|-
| cs/vb || 1.0 || Code files (cs indicates C#, vb indicates Visual Basic). Code behind files (see above) predominantly have the extension ".aspx.cs" or ".aspx.vb" for the two most common languages. Other code files (often containing common "library" classes) can also exist in the web folders with the cs/vb extension. In ASP.NET 2 these should be placed inside the App_Code folder where they are dynamically compiled and available to the whole application.
|-
| dbml || 3.5 || [[Language Integrated Query|LINQ to SQL]] data classes file
|-
| master || 2.0 || master page file
|-
| resx || 1.0 || resource files for [[internationalization]] and [[localization]]. Resource files can be global (e.g. messages) or "local" which means specific for a single aspx or ascx file.
|-
| sitemap || 2.0 || sitemap configuration files
|-
| skin || 2.0 || theme skin files.
|-
| svc || 3.0 || [[Windows Communication Foundation]] service file
|}

=== Directory structure ===

In general, the ASP.NET directory structure can be determined by the developer's preferences. Apart from a few reserved directory names, the site can span any number of directories. The structure is typically reflected directly in the urls. Although ASP.NET provides means for intercepting the request at any point during processing, the developer is not forced to funnel requests through a central application or front controller.

The special directory names (from ASP.NET 2.0 on) are <ref>http://msdn2.microsoft.com/en-us/library/ex526337.aspx ASP.NET Web Site Layout from MSDN</ref>:
; App_Browsers : holds site-specific browser definition files.
; App_Code : This is the "raw code" directory. The ASP.NET server automatically compiles files (and subdirectories) in this folder into an assembly which is accessible in the code of every page of the site. App_Code will typically be used for data access abstraction code, model code and business code. Also any site-specific http handlers and modules and web service implementation go in this directory. As an alternative to using App_Code the developer may opt to provide a separate assembly with precompiled code.
; App_Data : default directory for [[database]]s, such as Access mdb files and SQL Server mdf files. This directory is usually the only one with write access for the application.
; App_LocalResources : Contains localized resource files for individual pages of the site. E.g. a file called CheckOut.aspx.fr-FR.resx holds localized resources for the french version of the CheckOut.aspx page. When the UI culture is set to french, ASP.NET will automatically find and use this file for localization.
; App_GlobalResources : Holds '''resx''' files with localized resources available to every page of the site. This is where the ASP.NET developer will typically store localized messages etc. which are used on more than one page.
; App_Themes : holds alternative themes of the site.
; App_WebReferences : holds discovery files and [[WSDL]] files for references to [[web service]]s to be consumed in the site.
; Bin : Contains compiled code (.dll files) for controls, components, or other code that you want to reference in your application. Any classes represented by code in the Bin folder are automatically referenced in your application.

== Performance ==

ASP.NET aims for performance benefits over other script-based technologies (including Classic ASP) by compiling the server-side code to one or more [[dynamic link library|DLL]] [[computer file|file]]s on the [[web server]].<ref name="macdonald7-8">{{harv|MacDonald|Szpuszta|2005|pp=7-8}}</ref> This compilation happens automatically the first time a page is requested (which means the developer need not perform a separate compilation step for pages). This feature provides the ease of development offered by scripting languages with the performance benefits of a compiled binary.  However, the compilation might cause a noticeable delay to the web user when the newly-edited page is first requested from the web server. 

The ASPX and other resource files are placed in a virtual host on an [[Internet Information Services]] server (or other compatible ASP.NET servers;  see Other Implementations, below).  The first time a client requests a page, the .NET framework parses and compiles the file(s) into a .NET assembly and sends the response;  subsequent requests are served from the DLL files. By default ASP.NET will compile the entire site in batches of 1000 files upon first request. If the compilation delay is causing problems, the batch size or the compilation strategy may be tweaked.

Developers can also choose to pre-compile their code before deployment, eliminating the need for just-in-time compilation in a production environment.

== Extension ==

Microsoft has released some extension frameworks that plug into [[ASP.NET]] and extend its functionality. Some of them are:
; [[ASP.NET AJAX]]: An extension with both client-side as well as server-side components for writing ASP.NET pages that incorporate [[AJAX (programming)|AJAX]] functionality.
; [[ASP.NET MVC Framework]]: An extension to author ASP.NET pages using the [[Model View Controller|MVC]] architecture.

== ASP.NET compared to ASP classic ==

ASP.NET attempts to simplify developers' transition from [[Microsoft Windows|Windows]] application development to web development by offering the ability to build pages composed of ''[[Widget (computing)|controls]]'' similar to a Windows [[user interface]]. A web control, such as a ''button'' or ''label'', functions in very much the same way as its Windows counterpart: code can assign its properties and respond to its events. Controls know how to render themselves: whereas Windows controls draw themselves to the screen, web controls produce segments of [[HTML]] and [[JavaScript]] which form part of the resulting page sent to the end-user's browser.

ASP.NET encourages the programmer to develop applications using an [[Event-driven programming|event-driven]] [[Graphical user interface|GUI]] paradigm ([[Event-driven programming|event-driven]] [[Graphical user interface|GUI]] model), rather than in conventional web-[[Scripting programming language|scripting]] environments like ASP and [[PHP]]. The framework attempts to combine existing technologies such as JavaScript with internal components like "[[ViewState]]" to bring persistent (inter-request) state to the inherently [[Stateless server|stateless]] web environment.

Other differences compared to ASP classic are:
* Compiled code means applications run faster with more design-time errors trapped at the development stage.
* Significantly improved run-time error handling, making use of [[exception handling]] using try-catch blocks.
* Similar metaphors to [[Microsoft Windows|Windows]] applications such as controls and events.
* An extensive set of controls and class libraries allows the rapid building of applications, plus user-defined controls allow commonly used [[Web template|templates]], such as menus. Layout of these controls on a page is easier because most of it can be done visually in most editors.
* ASP.NET leverages the multi-language capabilities of the .NET [[Common Language Runtime|CLR]], allowing web pages to be coded in VB.NET, C#, J#, Delphi.NET, Chrome etc.
* Ability to cache the whole page or just parts of it to improve performance.
* Ability to use the [[code-behind]] development model to separate business logic from presentation.
* If an ASP.NET application [[Memory leak|leaks memory]], the ASP.NET runtime unloads the AppDomain hosting the erring application and reloads the application in a new AppDomain. 
* [[Session state]] in ASP.NET can be saved in a [[Microsoft SQL Server|SQL Server]] database or in a separate process running on the same machine as the web server or on a different machine. That way session values are not lost when the web server is reset or the ASP.NET worker process is recycled.
* Previous versions of ASP.NET (1.0 and 1.1) were criticized for their lack of standards compliance. The generated [[HTML]] and [[JavaScript]] sent to the client browser would not always validate against [[W3C]]/ECMA standards. In addition, the framework's browser detection feature sometimes incorrectly identified web browsers other than Microsoft's own [[Internet Explorer]] as "downlevel" and returned HTML/JavaScript to these clients with some of the features removed, or sometimes crippled or broken. However, in version 2.0, all controls generate valid [[HTML]] 4.0, [[XHTML]] 1.0 (the default) or [[XHTML]] 1.1 output, depending on the site configuration. Detection of standards-compliant web browsers is more robust and support for [[Cascading Style Sheets]] is more extensive.
* Web Server Controls: these are controls introduced by ASP.NET for providing the UI for the web form. These controls are state managed controls and are [[WYSIWYG]] controls.

== Criticisms of ASP.NET ==

On [[Internet Information Services|IIS]] 6.0 and lower, pages written using different versions of the ASP framework can't share [[Session State]] without the use of third-party libraries. This criticism does not apply to ASP.NET and ASP applications running side by side on [[Internet Information Services|IIS]] 7. With [[Internet Information Services|IIS]] 7, modules may be run in an integrated pipeline that allows modules written in any language to be executed for any request.<ref>[http://www.iis.net/default.aspx?tabid=2&subtabid=23&i=1223|Differences between IIS 7.0 Integrated Mode and Classic mode]</ref>    <!-- This link is dead.  Somebody please provide a comparable link --> {{Fact|date=April 2008}}
    
ASP.NET 2.0 produces markup that passes W3C validation, but it is debatable as to whether this increases [[Web accessibility|accessibility]], one of the benefits of a semantic [[XHTML]] page + [[CSS]] representation. Several controls, such as the ''[[Login]]'' controls and the ''Wizard'' control, use [[HTML]] [[Table (HTML)|tables]] for layout by default. [[Microsoft]] has solved this problem by releasing the [http://www.asp.net/cssadapters/ ASP.NET 2.0 CSS Control Adapters], a free add-on that produces compliant accessible [[XHTML]]+[[CSS]] markup.'''

== Development tools ==

Several available software packages exist for developing ASP.NET applications:

* [[Delphi programming language|Delphi 2006]]
* Macromedia Dreamweaver MX, [[Macromedia Dreamweaver MX 2004]], or [[Macromedia Dreamweaver 8]] (doesn't support ASP.NET 2.0 features, and produces very inefficient code for ASP.NET 1.x: also, code generation and ASP.NET features support through version 8.0.1 was little if any changed from version MX: version 8.0.2 does add changes to improve security against SQL injection attacks)
* [[Macromedia HomeSite]] 5.5 (For ASP Tags)
* [[Microsoft Expression Web]], part of the [[Microsoft Expression Studio]] application suite.
* [[Microsoft SharePoint Designer]]
* [[MonoDevelop]] (Free/[[Open Source]])
* [[SharpDevelop]] (Free/[[Open Source]])
* [[Visual Studio .NET]] (for ASP.NET 1.x)
* [[Visual Web Developer Express Edition|Visual Web Developer 2005 Express Edition]] (free) or [[Visual Studio 2005]] (for ASP.NET 2.0)
* [[Visual Web Developer Express Edition|Visual Web Developer 2008 Express Edition]] (free) or [[Visual Studio 2008]] (for ASP.NET 2.0/3.5)<ref>[http://www.microsoft.com/express/support/faq/ VS Express FAQ]</ref>

== Frameworks ==

It is not essential to use the standard webforms development model when developing with ASP.NET.  Noteworthy frameworks designed for the platform include:
* [[Monorail (.Net)|Castle Monorail]], an open-source [[Model-view-controller|MVC]] framework with an execution model similar to [[Ruby on Rails]]. The framework is commonly used with [[Castle ActiveRecord]], an ORM layer built on [[NHibernate]].
* Spring.NET, a port of the Spring framework for Java.
* Skaffold.NET, A simple framework for .NET applications, used in enterprise applications.


{| class="wikitable"
|-
!Date!!Version!!Remarks!!New features
|-
| [[January 16]], [[2002]] || 1.0 || First version<br>
released together with [[Visual Studio .NET]]
|
* [[Object oriented]] web application development supporting [[Inheritance (computer science)|Inheritance]], [[Polymorphism in object-oriented programming|Polymorphism]] and other standard OOP features
** Developers are no longer forced to use Server.CreateObject(...), so early-binding and type safety are possible.
* Based on [[Microsoft Windows|Windows]] programming;  the developer can make use of DLL class libraries and other features of the web server to build more robust applications that do more than simply rendering HTML ( i.e. [[exception handling]] )
|-
| [[April 24]], [[2003]] 
| 1.1 
| released together with [[Windows Server 2003]]<br>
released together with [[Visual Studio .NET 2003]]
|
* Mobile controls
* Automatic input validation
|-
| [[November 7]], [[2005]] 
| 2.0 
| 
codename [[Whidbey]]<br>
released together with [[Visual Studio 2005]] and [[Microsoft Visual Studio Express|Visual Web Developer Express]]<br>
and [[Microsoft SQL Server|SQL Server 2005]]
| 
* New data controls (GridView, FormView, DetailsView)
* New technique for declarative data access (SqlDataSource, ObjectDataSource, XmlDataSource controls)
* Navigation controls
* [[ASP master pages|Master pages]]
* Login controls
* Themes
* Skins
* Web parts
* Personalization services
* Full pre-compilation
* New localization technique
* Support for 64-bit processors
* Provider class model
|-
| [[November 6]], [[2006]]
| 3.0 
| 
previously known as WinFX <br>
released as an add-on to [[Visual Studio 2005]]
| 
* [[Windows Presentation Foundation]] (WPF)
* [[Windows Communication Foundation]] (WCF)
* [[Windows Workflow Foundation]] (WF) 
* [[Windows CardSpace]]
|-
| [[November 19]] [[2007]]
| 3.5 
| 

released together with [[Visual Studio 2008]]
| 
* New data controls (ListView, DataPager)
* Integrated [[AJAX]] support
* Designtime support for nested master pages in Visual Studio 2008
* Support for [[Language Integrated Query|LINQ]]
|}

== See also ==

* [[Active Server Pages]] (ASP) &ndash; ASP.NET's predecessor
* [[Yellow Screen of Death]] &ndash; ASP.NET's Exception page
* [[NUnitAsp]] - [[Unit testing]] platform for ASP.NET
* [[Postback]]

=== ASP.NET Extensions ===

* [[ASP.NET AJAX]] - Extension for [[AJAX (programming)|AJAX]] enabled ASP.NET pages.
* [[ASP.NET MVC Framework]] - Extension for building web applications using [[Model View Controller|MVC]] architecture..

=== Alternatives to .NET and IIS ===

* [[Mono (software)|Mono]] - An open source, cross platform implementation of [[Common Language Runtime|CLR]], including an alternative implementation of ASP.NET.
* [[UltiDev Cassini Web Server]]  - A free web server that can be redistributed with ASP.NET 1.1 and 2.0 applications.
* [[Abyss_Web_Server|Aprelium Abyss Web Server]] - A free lightweight web server that supports ASP.NET. Also available in a non-free "professional edition".

== Notes==
{{reflist|2}}

==References==
* {{cite book
| title = Pro ASP.NET 2.0 in C# 2005
| edition = 1st edition
| last = MacDonald
| first = Matthew
| coauthors = Mario Szpuszta
| year = 2005
| publisher = Apress
| id = ISBN 1-59059-496-7
}}

== Further reading ==

* Anne Boehm: ''Murachs ASP.NET 3.5 Web Programming with VB 2008'', July 21 2008, Mike Murach and Associates, ISBN 978-1-890774-47-9
* Stephen Walther: ''ASP.NET 3.5 Unleashed'', December 28 2007, Sams Publishing, ISBN 0-672-33011-3 ISBN 0-672-33011-3
* Stephen Walther: ''Data Access in the ASP.NET 2.0 Framework (Video Training)'', September 26 2007, Sams Publishing, ISBN 0-672-32952-2

== External links ==
<!--===========================({{NoMoreLinks}})===============================
    | PLEASE BE CAUTIOUS IN ADDING MORE LINKS TO THIS ARTICLE. WIKIPEDIA IS   |
    | NOT A COLLECTION OF LINKS NOR SHOULD IT BE USED FOR ADVERTISING.        |
    |                                                                         | 
    |               Excessive or inappropriate links WILL BE DELETED.         |
    |  See [[Wikipedia:External links]] and [[Wikipedia:Spam]] for details.   |
    |                                                                         | 
    | If there are already plentiful links, please propose additions or       |
    | replacements on this article's discussion page.  Or submit your link    |
    | to the appropriate category at the Open Directory Project (www.dmoz.org)|
    | and link back to that category using the {{dmoz}} template.             |
    ===========================({{NoMoreLinks}})===============================-->
{{Wikibooks}}
* [http://www.codango.com/aspnet/ Codango ASP.NET] The ASP.NET Resource Guide formerly known as [http://www.411asp.net/ 411ASP.NET].
* [http://www.dotnetspace.com/ ASP.NET tutorials and examples] 
* [http://www.asp.net/ Microsoft's Official ASP.NET 3.5 website] 
* [http://msdn.microsoft.com/asp.net/ ASP.NET on MSDN]

{{DotNET}}
{{Microsoft APIs|close}}
{{MS DevTools|close}}

[[Category:ASP.NET]]
[[Category:.NET programming languages]]
[[Category:Template engines]]
[[Category:World Wide Web]]
[[Category:Web application frameworks]]
[[Category:Microsoft application programming interfaces]]
[[Category:Microsoft Visual Studio]]

[[ar:Ø¥ÙŠ Ø¥Ø³ Ø¨ÙŠ.Ù†Øª]]
[[zh-min-nan:ASP.NET]]
[[ca:ASP.NET]]
[[cs:ASP.NET]]
[[da:ASP.NET]]
[[de:ASP.NET]]
[[es:ASP.NET]]
[[fa:Ø§ÛŒ Ø§Ø³ Ù¾ÛŒ Ø¯Ø§Øª Ù†Øª]]
[[fr:ASP.NET]]
[[gl:ASP.NET]]
[[id:ASP.NET]]
[[is:ASP.NET]]
[[it:ASP.NET]]
[[he:ASP.NET]]
[[lt:ASP.NET]]
[[ms:ASP.NET]]
[[nl:ASP.NET]]
[[ja:ASP.NET]]
[[no:ASP.NET]]
[[pl:ASP.NET]]
[[pt:ASP.NET]]
[[ro:ASP.NET]]
[[ru:ASP.NET]]
[[sq:ASP.NET]]
[[sk:ASP.NET]]
[[sv:ASP.NET]]
[[th:à¹€à¸­à¹€à¸­à¸ªà¸žà¸µà¸”à¸­à¸•à¹€à¸™à¹‡à¸•]]
[[tr:ASP.NET]]
[[zh:ASP.NET]]